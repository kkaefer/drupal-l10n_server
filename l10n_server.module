<?php
// $Id: l10n_server.module,v 1.1.2.5 2007-08-07 09:35:33 goba Exp $

/**
 * @file
 *   Extracts translatable strings from project files.
 *
 *   Tracks all translatable strings from all projects (modules
 *   and themes), centralizing the translation process. With
 *   the "Localization community" module, it is also possible to
 *   give users the opportunity to contribute, translating all
 *   strings online.
 */

define('L10N_STATUS_ALL', 0); 
define('L10N_STATUS_UNTRANSLATED', 1); 
define('L10N_STATUS_SUGGESTED', 2); 
define('L10N_STATUS_TRANSLATED', 3); 

// = Core hooks ================================================================

/**
 * Implementation of hook_help().
 */
function l10n_server_help($section) {
  switch ($section) {
    case 'admin/settings/l10n_server':
      return '<p>'. t('The Localization server watches for new projects popping up at drupal.org, downloads the new packages and extracts translatable strings out of them. Here you can set up the limits of how these operations are performed. The <a href="@scan_link">Scan tab</a> allows you to initiate a manual scan.', array('@scan_link' => url('admin/settings/l10n_server/scan'))) . '</p>';
  }
}

/**
 * Implementation of hook_menu().
 */
function l10n_server_menu($may_cache) {
  $items = array();
  if (!$may_cache) {
    $items[] = array(
      'title' => t('Localization server'),
      'path' => 'admin/settings/l10n_server',
      'description' => t('Configure the localization server'),
      'access' => user_access('administer localization server'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'l10n_server_settings_form',
    );
    $items[] = array(
      'title' => t('Configure'),
      'path' => 'admin/settings/l10n_server/configure',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items[] = array(
      'title' => t('Scan'),
      'path' => 'admin/settings/l10n_server/scan',
      'access' => user_access('administer localization server'),
      'callback' => 'l10n_server_scan',
      'type' => MENU_LOCAL_TASK
    );
    /*$items[] = array(
      'path' => 'translation_update',
      'access' => TRUE,
      'callback' => 'l10n_server_update',
      'callback arguments' => array(
        !empty($_GET['language'])  ? $_GET['language']  : NULL,
        !empty($_GET['projects'])  ? $_GET['projects']  : NULL,
        !empty($_GET['startdate']) ? $_GET['startdate'] : NULL),
      'type' => MENU_CALLBACK
    );*/
  }
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function l10n_server_perm() {
  return array('administer localization server');
}

/**
 * Implementation of hook_cron().
 */
function l10n_server_cron() {
  if (variable_get('l10n_server_cron', FALSE)) {
    l10n_server_scan(TRUE);
  }
}

// = Settings ==================================================================

/**
 * Settings form callback.
 */
function l10n_server_settings_form() {
  $form = array();
  $form['l10n_server_limit'] = array(
    '#title' => t('Number of projects to scan at once'),
    '#description' => t('How many projects to scan on a manual or a cron run.'),
    '#type' => 'select',
    '#options' => array(-1 => t('Unlimited (not recommended)'), 1 => 1) + drupal_map_assoc(range(10, 100, 10)),
    '#default_value' => variable_get('l10n_server_limit', 1),
  );
  $form['l10n_server_cron'] = array(
    '#title' => t('Scan new projects on every cron run'),
    '#type' => 'radios',
    '#options' => array(t('Disabled'), t('Enabled')),
    '#default_value' => variable_get('l10n_server_cron', 0),
  );
  return system_settings_form($form);
}

// = Project handling ==========================================================

/**
 * Scans files of a project and release picked.
 *
 * @param $automated
 *   Whether the execution was automated and user feedback should
 *   not be provided.
 *
 * @todo
 *   Do less HTTP queries!
 */
function l10n_server_scan($automated = FALSE) {
  include_once 'l10n_server_projects.inc';
  
  // Always update full project list.
  l10n_server_sync_projects();
  
  // Pick the project we did not update for the longest period.
  $uri = db_result(db_query_range("SELECT uri FROM {l10n_server_project} ORDER BY last_parsed ASC", 0, 1));
  $project = l10n_server_get_projects($uri);
  l10n_server_sync_releases($project);
  
  // Pick the release we did not update for the longest period.
  $release = db_fetch_object(db_query_range("SELECT r.* FROM {l10n_server_project} p LEFT JOIN {l10n_server_release} r ON p.pid = r.pid WHERE p.uri = '%s' ORDER BY r.last_parsed ASC", $uri, 0, 1));
  $result = l10n_server_sync_files($release);
  
  if (!$automated) {
    // User feedback if not automated. Log messages are already done.
    if (isset($result['error'])) {
      drupal_set_message($result['error'], 'error');
    }
    if (isset($result['message'])) {
      drupal_set_message($result['message']);
    }
  }
  // Ensure that a Drupal page will be displayed with the messages.
  return '';
}

// = Serving l10n_client =======================================================

/**
 * PO file with all translated strings from a given locale and module
 *
 * @param $language
 *  string, the language code, ie "en", "pt-br", "de"
 * @param $project
 *  string, the project name
 * @param $startdate
 *  number, the last uptade date
 * @return
 *  string, a XML file with all translated strings
 *
function l10n_server_update($language, $projects, $startdate) {
  if (empty($language) or empty($projects)) {
    print("");
    return;
  }
  $projects = explode("|", $projects);
  $strings = array();
  // transform GMT time into Unix time
  preg_match('/(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2})(:(\d{2}))?(?:([-+])(\d{2}):?(\d{2})|(Z))?/', $startdate, $match);
  list($year, $month, $day, $hour, $minute, $second) = array($match[1], $match[2], $match[3], $match[4], $match[5], $match[7]);
  $startdate = gmmktime($hour, $minute, $second, $month, $day, $year);
  $items = "";
  foreach ($projects as $project) {
    if ($strings = l10n_server_get_strings($language, "translated", NULL, $project, $startdate)) {
      while (list(, $string) = each($strings)) {
        $item = array("item" => array("string" => $string["source"],
          "translation" => $string["translated"]));
        $items .= format_xml_elements($item);
      }
    }
  }
  if (!empty($items)) {
  print("<?xml version='1.0' encoding='utf-8'?>
<module>
<language>". $language ."</language>
<fromdate>". $startdate ."</fromdate>
<todate>". time() ."</todate>".
  $items .
"</module>");
  }
}*/

// = API functions =============================================================

/**
 * Provides a list of projects already recoreded in the l10n_server
 * database, ordered by uri.
 *
 * @param $uri
 *   Project URI, if requesting information about one project only.
 * @param $pager
 *  Number of projects to return a pager query result with. If NULL,
 *  all projects are returned.
 *  
 * @return
 *  An associative array keyed with project uris.
 */
function l10n_server_get_projects($uri = NULL, $pager = NULL) {
  static $projects = array();
  if (!isset($pager)) {
    if (isset($uri)) {
      if (isset($projects[$uri])) {
        return $projects[$uri];
      }
      $result = db_query("SELECT * FROM {l10n_server_project} WHERE uri = '%s'", $uri);
      if ($project = db_fetch_object($result)) {
        $project->core_compatibility = unserialize($project->core_compatibility);
        $projects[$uri] = $project;
        return $project;
      }
      return NULL;
    }
    $results = db_query('SELECT * FROM {l10n_server_project} ORDER BY uri');
  }
  else {
    $results = pager_query('SELECT * FROM {l10n_server_project} ORDER BY uri', $pager, 0, NULL);
  }
  while ($project = db_fetch_object($results)) {
    $project->core_compatibility = unserialize($project->core_compatibility);
    $projects[$project->uri] = $project;
  }
  return $projects;
}

/**
 * Get all releases of a project.
 *
 * @param $uri
 *   Project code to look up releases for.
 * @return
 *   Array of release objects for project.
 */
function l10n_server_get_releases($uri = NULL, $parsed_only = TRUE) {
  $releases = array();
  $query = "SELECT r.* FROM {l10n_server_release} r LEFT JOIN {l10n_server_project} p ON r.pid = p.pid WHERE p.uri = '%s'";
  if ($parsed_only) {
    $query .= ' AND r.last_parsed > 0';
  }
  $result = db_query($query, $uri);
  while ($release = db_fetch_object($result)) {
    $releases[] = $release;
  }
  
  return $releases;
}

/**
 * Get strings under some conditions.
 *
 * @param $langcode
 *   Language code, for example: 'hu', 'pt-br', 'de', 'it' and so on.
 * @param $status
 *   Filter strings by status. See L10N_STATUS_ALL, L10N_STATUS_UNTRANSLATED,
 *   L10N_STATUS_SUGGESTED and L10N_STATUS_TRANSLATED.
 * @param $count
 *   Boolean to return the result count (TRUE) or the result itself (FALSE).
 * @param $uri
 *   URI of the project.
 * @param $startdate
 *   The unix timestamp that all translations shuold be older than.
 * @param $pager
 *   How many strings to be returned.
 * @return
 *   An array of strings columns from database.
 */
function l10n_server_get_strings($langcode, $status, $count = FALSE, $uri = NULL, $startdate = NULL, $pager = NULL) {
  if (empty($langcode)) {
    return NULL;
  }
  
  $project = l10n_server_get_projects($uri);
  $sql = "SELECT DISTINCT s.sid, s.value, s.plural FROM {l10n_server_release} r LEFT JOIN {l10n_server_file} f ON r.rid = f.rid LEFT JOIN {l10n_server_line} l ON f.fid = l.fid LEFT JOIN {l10n_server_string} s ON l.sid = s.sid WHERE r.pid = %d";
  $sql_count = "SELECT COUNT(DISTINCT(s.sid)) FROM {l10n_server_release} r LEFT JOIN {l10n_server_file} f ON r.rid = f.rid LEFT JOIN {l10n_server_line} l ON f.fid = l.fid LEFT JOIN {l10n_server_string} s ON l.sid = s.sid WHERE r.pid = %d";
  $sql_arg = $project->pid;
  if (!empty($pager)) {
    $strings = pager_query($sql, $pager, 0, $sql_count, $sql_arg);
  }
  else {
    $strings = db_query($sql, $sql_arg);
  }
  $result = array();
  while ($string = db_fetch_object($strings)) {
    $result[] = $string;
  }
  return $result;

  // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  $sql_args[] = $langcode;
  
  $project_sql = $startdate_sql = ' TRUE ';
  if (!empty($startdate) and is_numeric($startdate)) {
    $startdate_sql = ' update_date >= %d ';
    $sql_args[] = $startdate;
  }
  if (!empty($project)) {
    $project_sql = " ts.project = '%s' ";
    $sql_args[] = $project;
  }
  
  switch ($status) {
    case L10N_STATUS_UNTRANSLATED:
      $sql = "SELECT ts.sid FROM {l10n_server_source} ts WHERE ts.sid NOT IN (SELECT sid FROM {l10n_server_target} WHERE locale = '%s' AND $startdate_sql) AND $project_sql ORDER BY ts.source";
      $sql_count = "SELECT COUNT(ts.sid) FROM {l10n_server_source} ts WHERE ts.sid NOT IN (SELECT sid FROM {l10n_server_target} WHERE locale = '%s' AND $startdate_sql) AND $project_sql ORDER BY ts.source";
      break;
    case L10N_STATUS_TRANSLATED:
      $sql = "SELECT ts.sid FROM {l10n_server_source} ts WHERE ts.sid IN (SELECT sid FROM {l10n_server_target} WHERE locale = '%s' AND official = TRUE AND $startdate_sql) AND $project_sql ORDER BY ts.source";
      $sql_count = "SELECT COUNT(ts.sid) FROM {l10n_server_source} ts WHERE ts.sid IN (SELECT sid FROM {l10n_server_target} WHERE locale = '%s' AND official = TRUE AND $startdate_sql) AND $project_sql ORDER BY ts.source";
      break;
    case L10N_STATUS_SUGGESTED:
      $sql = "SELECT ts.sid FROM {l10n_server_source} ts INNER JOIN (SELECT * FROM {l10n_server_target} WHERE locale = '%s' AND $startdate_sql) tt ON tt.sid = ts.sid WHERE ts.sid NOT IN (SELECT sid FROM {l10n_server_target} WHERE official = TRUE) AND $project_sql ORDER BY ts.source";
      $sql_count = "SELECT COUNT(ts.sid) FROM {l10n_server_source} ts INNER JOIN (SELECT * FROM {l10n_server_target} WHERE locale = '%s' AND $startdate_sql) tt ON tt.sid = ts.sid WHERE ts.sid NOT IN (SELECT sid FROM {l10n_server_target} WHERE official = TRUE) AND $project_sql ORDER BY ts.source";
      break;
    case L10N_STATUS_ALL:
    default:
      $sql = "SELECT ts.sid FROM {l10n_server_source} ts LEFT JOIN (SELECT * FROM {l10n_server_target} WHERE locale = '%s' AND $startdate_sql) tt ON tt.sid = ts.sid WHERE $project_sql ORDER BY ts.source";
      $sql_count = "SELECT COUNT(ts.sid) FROM {l10n_server_source} ts LEFT JOIN (SELECT * FROM {l10n_server_target} WHERE locale = '%s' AND $startdate_sql) tt ON tt.sid = ts.sid WHERE $project_sql ORDER BY ts.source";
      break;
  }

  if (!empty($pager)) {
    $strings = pager_query($sql, $pager, 0, $sql_count, $sql_args);
  }
  else {
    $strings = db_query($sql, $sql_args);
  }

  if ($count) {
    return db_num_rows($strings);
  }
  
  $sid_sql = $sid_params = array();
  array_push($sid_params, $langcode);
  while ($string = db_fetch_object($strings)) {
    array_push($sid_sql, '%d');
    array_push($sid_params, $string->sid);
  }
  if (!empty($sid_sql)) {
    $strings = db_query("SELECT *, ts.sid FROM {l10n_server_source} ts LEFT JOIN (SELECT * FROM {l10n_server_target} WHERE locale = '%s') tt ON tt.sid = ts.sid WHERE ts.sid IN (". implode(",", $sid_sql) .") ORDER BY ts.source, tt.official DESC", $sid_params);
  }
  
  $result = array();
  while ($string = db_fetch_object($strings)) {
    // When selecting strings to give to l10n_client users (ie. when
    // the startdate is set, only official translations are valid.
    if (!empty($startdate) and empty($string->official)) {
      continue;
    }
    $result[] = $string;
  }
  return !empty($result) ? $result : NULL;
}
