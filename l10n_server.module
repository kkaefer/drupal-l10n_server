<?php
// $Id: l10n_server.module,v 1.1.2.2 2007-07-03 20:56:01 goba Exp $

/**
 * @file
 *   Extracts translatable strings from project files.
 *
 *   Tracks all translatable strings from all projects (modules
 *   and themes), centralizing the translation process. With
 *   the "Localization community" module, it is also possible to
 *   give users the opportunity to contribute, translating all
 *   strings online.
 */

define('L10N_STATUS_ALL', 0); 
define('L10N_STATUS_UNTRANSLATED', 1); 
define('L10N_STATUS_SUGGESTED', 2); 
define('L10N_STATUS_TRANSLATED', 3); 

// = Core hooks ================================================================

/**
 * Implementation of hook_help().
 */
function l10n_server_help($section) {
  switch ($section) {
    case 'admin/settings/l10n_server':
      return '<p>'. t('The Localization server watches for new projects popping up at drupal.org, downloads the new packages and extracts translatable strings out of them. Here you can set up the limits of how these operations are performed. The <a href="@scan_link">Scan tab</a> allows you to initiate a manual scan.', array('@scan_link' => url('admin/settings/l10n_server/scan'))) . '</p>';
  }
}

/**
 * Implementation of hook_menu().
 */
function l10n_server_menu($may_cache) {
  $items = array();
  if (!$may_cache) {
    $items[] = array(
      'title' => t('Localization server'),
      'path' => 'admin/settings/l10n_server',
      'description' => t('Configure the localization server'),
      'access' => user_access('administer localization server'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'l10n_server_settings_form',
    );
    $items[] = array(
      'title' => t('Configure'),
      'path' => 'admin/settings/l10n_server/configure',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items[] = array(
      'title' => t('Scan'),
      'path' => 'admin/settings/l10n_server/scan',
      'access' => user_access('administer localization server'),
      'callback' => 'l10n_server_scan_new_projects',
      'type' => MENU_LOCAL_TASK
    );
    /*$items[] = array(
      'path' => 'translation_update',
      'access' => TRUE,
      'callback' => 'l10n_server_update',
      'callback arguments' => array(
        !empty($_GET['language'])  ? $_GET['language']  : NULL,
        !empty($_GET['projects'])  ? $_GET['projects']  : NULL,
        !empty($_GET['startdate']) ? $_GET['startdate'] : NULL),
      'type' => MENU_CALLBACK
    );*/
  }
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function l10n_server_perm() {
  return array('administer localization server');
}

/**
 * Implementation of hook_cron().
 */
function l10n_server_cron() {
  if (variable_get('l10n_server_cron', FALSE)) {
    l10n_server_scan_new_projects(TRUE);
  }
}

// = Settings ==================================================================

/**
 * Settings form callback.
 */
function l10n_server_settings_form() {
  $form = array();
  $form['l10n_server_limit'] = array(
    '#title' => t('Number of projects to scan at once'),
    '#description' => t('How many projects to scan on a manual or a cron run.'),
    '#type' => 'select',
    '#options' => array(-1 => t('Unlimited (not recommended)'), 1 => 1) + drupal_map_assoc(range(10, 100, 10)),
    '#default_value' => variable_get('l10n_server_limit', 1),
  );
  $form['l10n_server_cron'] = array(
    '#title' => t('Scan new projects on every cron run'),
    '#type' => 'radios',
    '#options' => array(t('Disabled'), t('Enabled')),
    '#default_value' => variable_get('l10n_server_cron', 0),
  );
  return system_settings_form($form);
}

// = Project handling ==========================================================

/**
 * Scan new projects for strings. Record project and string details in the
 * database.
 */
function l10n_server_scan_new_projects($automated = FALSE) {
  
  if (!$projects = l10n_server_get_new_projects()) {
    // If we have no new projects to scan, abort.
    watchdog('l10n_server', t('No new projects to scan.'));
    return;
  }
  
  // This could take a long time.
  @set_time_limit(0);

  // We depend on the PEAR Tar class and potx module.
  include_once('Archive/Tar.php');
  require_once(drupal_get_path('module', 'potx') .'/potx.inc');

  // Set up status messages if not in automated mode.
  _potx_status($automated ? POTX_STATUS_SILENT : POTX_STATUS_MESSAGE);
  
  foreach($projects as $project_code => $project) {
    // Local place to save the tarball.
    $file = file_directory_temp() .'/'. $project->file;
    // Local place to extract the tarball.
    $path = file_directory_temp() .'/l10n_server';
    
    // Nothing to do if already downloaded and/or extracted in the local filesystem.
    if (file_exists($file) or is_dir($path)) {
      watchdog('l10n_server', t('Project %project (%code) file %file or the path %path already exists.', array('%project' => $project->project, '%code' => $project_code, '%file' => $file, '%path' => $path)));
      continue;
    }
    
    // Download the tar.gz file from drupal.org and save it in the local filesystem.
    if (!copy($project->path, $file)) {
      watchdog('l10n_server', t('Unbale to download and save project %project (%code) file.', array('%project' => $project->project, '%code' => $project_code)));
      continue;
    }
    
    // Extract the local file to the l10n_server directory and remove the tarball.
    $obj = new Archive_Tar($file);
    if (!$obj->extract($path)) {
      watchdog('l10n_server', t('Error on extracting project %project (%code) file.', array('%project' => $project->project, '%code' => $project_code)));
      unlink($file);
      continue;
    }
    
    // Get all source files and save strings with our callback for this project.
    $files = _potx_explore_dir($path);
    l10n_server_save_string($project_code);
    foreach ($files as $filename) {
      _potx_process_file($filename, 0, 'l10n_server_save_string');
    }
    
    // Delete the extracted files and the tarball.
    l10n_server_rmdir_recursive($path);
    unlink($file);
    
    // Record changes of the scanned project in the database.
    if (db_result(db_query("SELECT code FROM {l10n_server_projects} WHERE code = '%s'", $project_code))) {
      db_query("UPDATE {l10n_server_projects} SET file = '%s', path = '%s' WHERE code = '%s'", $code, $project->file, $project->path);
    }
    else {
      db_query("INSERT INTO {l10n_server_projects} (code, project, file, path) VALUES ('%s', '%s', '%s', '%s')", $project_code, $project->project,$project->file, $project->path);
    }
    watchdog('l10n_server', t('Project %project (%code) has been scanned.', array('%project' => $project->project, '%code' => $project_code)));
    if (!$automated) {
      drupal_set_message(t('Project %project (%code) has been scanned.', array('%project' => $project->project, '%code' => $project_code)));
    }
  }
  if (!$automated) {
    return '<p>'. t('Manual scan run completed.') . '</p>';
  }
}

/**
 * String saving callback for potx. The project can be set with calling
 * l10n_server_save_string() with the project name only. A string is saved
 * with passing on the strings value, file and line number.
 *
 * @todo
 *   Save the strings where the string was found.
 * @todo
 *   More elegant plural handling.
 * @todo
 *   Abstract strings out of projects, so we can link them together,
 *   and share between versions.
 * @todo
 *   Find a way to properly use POTX constants before potx.inc is
 *   loaded.
 *
 * @param $value
 *   Project name to set if $file is NULL. Otherwise the string value to store.
 * @param $file
 *   Name of file the string occured in.
 * @param $line
 *   Number of line the string was found.
 * @param $string_mode
 *   String mode: POTX_STRING_INSTALLER, POTX_STRING_RUNTIME
 *   or POTX_STRING_BOTH.
 */
function l10n_server_save_string($value = NULL, $file = NULL, $line = 0, $string_mode = POTX_STRING_RUNTIME) {
  static $project;
  
  if ($file == NULL) {
    $project = $value;
  }
  else {
    $parts = explode("\0", $value, 2);
    foreach ($parts as $num => $part) {
      if (!db_result(db_query("SELECT sid FROM {l10n_server_source} WHERE source = '%s' AND project= '%s'", $part, $project))) {
        $ptid = 0;
        if (!empty($num)) {
          $ptid = db_result(db_query("SELECT sid FROM {l10n_server_source} WHERE source = '%s' AND project= '%s' AND ptid = 0", $parts[0], $project));
        }
        db_query("INSERT INTO {l10n_server_source} (source, project, ptid) VALUES ('%s', '%s', %d)", $part, $project, $ptid);
      }
    }
  }
}

/**
 * Delete the complete contents of a directory recursively.
 *
 * @param $dirname
 *  The directory name to be deleted.
 */
function l10n_server_rmdir_recursive($directory) {
  if (!is_dir($directory)) {
    return;
  }
  if (substr($directory, -1) != '/') {
    $directory .= '/';
  }
  if ($handle = opendir($directory)) {
    while ($file = readdir($handle)) {
        if ($file == '.' or $file == '..') {
          continue;
        }
        $path = $directory .'/'. $file;
        if (is_dir($path)) {
          l10n_server_rmdir_recursive($path);
        }
        else {
          unlink($path);
        }
    }
    rmdir($directory);
    closedir($handle);
  }
}

// = Serving l10n_client =======================================================

/**
 * Get strings under some conditions.
 *
 * @param $langcode
 *   Language code, for example: 'hu', 'pt-br', 'de', 'it' and so on.
 * @param $status
 *   Filter strings by status. See L10N_STATUS_ALL, L10N_STATUS_UNTRANSLATED,
 *   L10N_STATUS_SUGGESTED and L10N_STATUS_TRANSLATED.
 * @param $count
 *   Boolean to return the result count (TRUE) or the result itself (FALSE).
 * @param $project
 *   Code name of te the project.
 * @param $startdate
 *   The unix timestamp that all translations shuold be older than.
 * @param $pager
 *   How many strings to be returned.
 * @return
 *   An array of strings columns from database.
 */
function l10n_server_get_strings($langcode, $status, $count = FALSE, $project = NULL, $startdate = NULL, $pager = NULL) {
  if (empty($langcode)) {
    return NULL;
  }

  $sql_args[] = $langcode;
  
  $project_sql = $startdate_sql = ' TRUE ';
  if (!empty($startdate) and is_numeric($startdate)) {
    $startdate_sql = ' update_date >= %d ';
    $sql_args[] = $startdate;
  }
  if (!empty($project)) {
    $project_sql = " ts.project = '%s' ";
    $sql_args[] = $project;
  }
  
  switch ($status) {
    case L10N_STATUS_UNTRANSLATED:
      $sql = "SELECT ts.sid FROM {l10n_server_source} ts WHERE ts.sid NOT IN (SELECT sid FROM {l10n_server_target} WHERE locale = '%s' AND $startdate_sql) AND $project_sql ORDER BY ts.source";
      $sql_count = "SELECT COUNT(ts.sid) FROM {l10n_server_source} ts WHERE ts.sid NOT IN (SELECT sid FROM {l10n_server_target} WHERE locale = '%s' AND $startdate_sql) AND $project_sql ORDER BY ts.source";
      break;
    case L10N_STATUS_TRANSLATED:
      $sql = "SELECT ts.sid FROM {l10n_server_source} ts WHERE ts.sid IN (SELECT sid FROM {l10n_server_target} WHERE locale = '%s' AND official = TRUE AND $startdate_sql) AND $project_sql ORDER BY ts.source";
      $sql_count = "SELECT COUNT(ts.sid) FROM {l10n_server_source} ts WHERE ts.sid IN (SELECT sid FROM {l10n_server_target} WHERE locale = '%s' AND official = TRUE AND $startdate_sql) AND $project_sql ORDER BY ts.source";
      break;
    case L10N_STATUS_SUGGESTED:
      $sql = "SELECT ts.sid FROM {l10n_server_source} ts INNER JOIN (SELECT * FROM {l10n_server_target} WHERE locale = '%s' AND $startdate_sql) tt ON tt.sid = ts.sid WHERE ts.sid NOT IN (SELECT sid FROM {l10n_server_target} WHERE official = TRUE) AND $project_sql ORDER BY ts.source";
      $sql_count = "SELECT COUNT(ts.sid) FROM {l10n_server_source} ts INNER JOIN (SELECT * FROM {l10n_server_target} WHERE locale = '%s' AND $startdate_sql) tt ON tt.sid = ts.sid WHERE ts.sid NOT IN (SELECT sid FROM {l10n_server_target} WHERE official = TRUE) AND $project_sql ORDER BY ts.source";
      break;
    case L10N_STATUS_ALL:
    default:
      $sql = "SELECT ts.sid FROM {l10n_server_source} ts LEFT JOIN (SELECT * FROM {l10n_server_target} WHERE locale = '%s' AND $startdate_sql) tt ON tt.sid = ts.sid WHERE $project_sql ORDER BY ts.source";
      $sql_count = "SELECT COUNT(ts.sid) FROM {l10n_server_source} ts LEFT JOIN (SELECT * FROM {l10n_server_target} WHERE locale = '%s' AND $startdate_sql) tt ON tt.sid = ts.sid WHERE $project_sql ORDER BY ts.source";
      break;
  }

  if (!empty($pager)) {
    $strings = pager_query($sql, $pager, 0, $sql_count, $sql_args);
  }
  else {
    $strings = db_query($sql, $sql_args);
  }

  if ($count) {
    return db_num_rows($strings);
  }
  
  $sid_sql = $sid_params = array();
  array_push($sid_params, $langcode);
  while ($string = db_fetch_object($strings)) {
    array_push($sid_sql, '%d');
    array_push($sid_params, $string->sid);
  }
  if (!empty($sid_sql)) {
    $strings = db_query("SELECT *, ts.sid FROM {l10n_server_source} ts LEFT JOIN (SELECT * FROM {l10n_server_target} WHERE locale = '%s') tt ON tt.sid = ts.sid WHERE ts.sid IN (". implode(",", $sid_sql) .") ORDER BY ts.source, tt.official DESC", $sid_params);
  }
  
  $result = array();
  while ($string = db_fetch_object($strings)) {
    // When selecting strings to give to l10n_client users (ie. when
    // the startdate is set, only official translations are valid.
    if (!empty($startdate) and empty($string->official)) {
      continue;
    }
    $result[] = $string;
  }
  return !empty($result) ? $result : NULL;
}

/**
 * PO file with all translated strings from a given locale and module
 *
 * @param $language
 *  string, the language code, ie "en", "pt-br", "de"
 * @param $project
 *  string, the project name
 * @param $startdate
 *  number, the last uptade date
 * @return
 *  string, a XML file with all translated strings
 *
function l10n_server_update($language, $projects, $startdate) {
  if (empty($language) or empty($projects)) {
    print("");
    return;
  }
  $projects = explode("|", $projects);
  $strings = array();
  // transform GMT time into Unix time
  preg_match('/(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2})(:(\d{2}))?(?:([-+])(\d{2}):?(\d{2})|(Z))?/', $startdate, $match);
  list($year, $month, $day, $hour, $minute, $second) = array($match[1], $match[2], $match[3], $match[4], $match[5], $match[7]);
  $startdate = gmmktime($hour, $minute, $second, $month, $day, $year);
  $items = "";
  foreach ($projects as $project) {
    if ($strings = l10n_server_get_strings($language, "translated", NULL, $project, $startdate)) {
      while (list(, $string) = each($strings)) {
        $item = array("item" => array("string" => $string["source"],
          "translation" => $string["translated"]));
        $items .= format_xml_elements($item);
      }
    }
  }
  if (!empty($items)) {
  print("<?xml version='1.0' encoding='utf-8'?>
<module>
<language>". $language ."</language>
<fromdate>". $startdate ."</fromdate>
<todate>". time() ."</todate>".
  $items .
"</module>");
  }
}*/

// = API functions =============================================================

/**
 * Provides a list of projects already recoreded in the l10n_server
 * database, ordered by codename.
 *
 * @param $pager
 *  Number of projects to return a pager query result with. If NULL,
 *  all projects are returned.
 *  
 * @return
 *  An associative array keyed with project codenames, 
 */
function l10n_server_get_projects($pager = NULL) {
  $projects = array();
  if (!isset($pager)) {
    $results = db_query('SELECT * FROM {l10n_server_projects} ORDER BY code');
  }
  else {
    $results = pager_query('SELECT * FROM {l10n_server_projects} ORDER BY code', $pager, 0, NULL);
  }
  while ($project = db_fetch_object($results)) {
    $projects[$project->code] = $project;
  }
  return $projects;
}

/**
 * Compile a list of *new* projects by consulting the updates.drupal.org
 * XML-RPC interface and comparing the project list to the list on the
 * local database. The number of new projects recorded is limited by
 * the 'l10n_server_limit' variable.
 *
 * @todo
 *   This only scans 5.x projects, lift this limitation!
 *
 * @return
 *   An associative array keyed by the project codename with project
 *   object values.
 */
function l10n_server_get_new_projects() {
  $projects = $remote = array();
  // Get list of currently recorded projects.
  $current = l10n_server_get_projects();
  // Get complete list of projects maintained at Drupal.org from the
  // project_release module XML-RPC API running at updates.drupal.org.
  if ($remote = xmlrpc('http://updates.drupal.org/xmlrpc.php', 'project.release.data', 'all', '5.x')) {
    $remote = unserialize(gzinflate(substr(substr(base64_decode($remote), 10), 0, -8)));
    $countdown = variable_get('l10n_server_limit', 1);
    foreach($remote as $project_code => $project) {
      if ($countdown == 0) {
        // We reached our limit.
        break 1;
      }
      if ($current[$project_code]->file != $project['download']['title']) {
        // We have found a project with a *new name*.
        $projects[$project_code] = (object) array(
          'code'    => $project_code,
          'project' => $project['name'],
          'file'    => $project['download']['title'],
          'path'    => $project['download']['href'],
        );
        $countdown--;
      }
    }
  }
  return $projects;
}
