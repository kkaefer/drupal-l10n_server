<?php
// $Id: l10n_server.module,v 1.1.2.7 2007-08-10 14:04:01 goba Exp $

/**
 * @file
 *   Extracts translatable strings from project files.
 *
 *   Tracks all translatable strings from all projects (modules
 *   and themes), centralizing the translation process. With
 *   the "Localization community" module, it is also possible to
 *   give users the opportunity to contribute, translating all
 *   strings online.
 */

/**
 * Strings with any status.
 */
define('L10N_STATUS_ALL', 0); 

/**
 * Untranslated strings only.
 */
define('L10N_STATUS_UNTRANSLATED', 1); 

/**
 * Suggested (but not approved) strings only.
 */
define('L10N_STATUS_SUGGESTED', 2); 

/**
 * Translated strings only.
 */
define('L10N_STATUS_TRANSLATED', 3); 

// = Core hooks ================================================================

/**
 * Implementation of hook_help().
 */
function l10n_server_help($section) {
  switch ($section) {
    case 'admin/settings/l10n_server':
      return '<p>'. t('The Localization server watches for new projects popping up at drupal.org, downloads the new packages and extracts translatable strings out of them. Here you can set up the limits of how these operations are performed. The <a href="@scan_link">Scan tab</a> allows you to initiate a manual scan.', array('@scan_link' => url('admin/settings/l10n_server/scan'))) . '</p>';
  }
}

/**
 * Implementation of hook_menu().
 */
function l10n_server_menu($may_cache) {
  $items = array();
  if (!$may_cache) {
    $items[] = array(
      'title' => t('Localization server'),
      'path' => 'admin/settings/l10n_server',
      'description' => t('Configure the localization server'),
      'access' => user_access('administer localization server'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'l10n_server_settings_form',
    );
    $items[] = array(
      'title' => t('Configure'),
      'path' => 'admin/settings/l10n_server/configure',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items[] = array(
      'title' => t('Scan'),
      'path' => 'admin/settings/l10n_server/scan',
      'access' => user_access('administer localization server'),
      'callback' => 'l10n_server_scan',
      'type' => MENU_LOCAL_TASK
    );
  }
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function l10n_server_perm() {
  return array('administer localization server');
}

/**
 * Implementation of hook_cron().
 */
function l10n_server_cron() {
  if (variable_get('l10n_server_cron', FALSE)) {
    l10n_server_scan(TRUE);
  }
}

// = Settings ==================================================================

/**
 * Settings form callback.
 */
function l10n_server_settings_form() {
  $form = array();
  $form['l10n_server_limit'] = array(
    '#title' => t('Number of projects to scan at once'),
    '#description' => t('How many projects to scan on a manual or a cron run.'),
    '#type' => 'select',
    '#options' => array(-1 => t('Unlimited (not recommended)'), 1 => 1) + drupal_map_assoc(range(10, 100, 10)),
    '#default_value' => variable_get('l10n_server_limit', 1),
  );
  $form['l10n_server_cron'] = array(
    '#title' => t('Scan new projects on every cron run'),
    '#type' => 'radios',
    '#options' => array(t('Disabled'), t('Enabled')),
    '#default_value' => variable_get('l10n_server_cron', 0),
  );
  return system_settings_form($form);
}

// = Project handling ==========================================================

/**
 * Scans files of a project and release picked.
 *
 * @param $automated
 *   Whether the execution was automated and user feedback should
 *   not be provided.
 *
 * @todo
 *   Do less HTTP queries!
 */
function l10n_server_scan($automated = FALSE) {
  include_once 'l10n_server_projects.inc';
  
  // Always update full project list.
  l10n_server_sync_projects();
  
  // Pick the project we did not update for the longest period.
  $uri = db_result(db_query_range("SELECT uri FROM {l10n_server_project} ORDER BY last_parsed ASC", 0, 1));
  $project = l10n_server_get_projects($uri);
  l10n_server_sync_releases($project);
  
  // Pick the release we did not update for the longest period.
  $release = db_fetch_object(db_query_range("SELECT r.* FROM {l10n_server_project} p LEFT JOIN {l10n_server_release} r ON p.pid = r.pid WHERE p.uri = '%s' ORDER BY r.last_parsed ASC", $uri, 0, 1));
  $result = l10n_server_sync_files($release);
  
  if (!$automated) {
    // User feedback if not automated. Log messages are already done.
    if (isset($result['error'])) {
      drupal_set_message($result['error'], 'error');
    }
    if (isset($result['message'])) {
      drupal_set_message($result['message']);
    }
  }
  // Ensure that a Drupal page will be displayed with the messages.
  return '';
}

// = API functions =============================================================

/**
 * Provides a list of projects already recoreded in the l10n_server
 * database, ordered by uri.
 *
 * @param $uri
 *   Project URI, if requesting information about one project only.
 * @param $pager
 *  Number of projects to return a pager query result with. If NULL,
 *  all projects are returned.
 *  
 * @return
 *  An associative array keyed with project uris.
 */
function l10n_server_get_projects($uri = NULL, $pager = NULL) {
  static $projects = array();
  
  if (isset($pager)) {
    // If a pager view was asked, collect data independently.
    $results = pager_query('SELECT * FROM {l10n_server_project} ORDER BY uri', $pager, 0, NULL);
    $pager_results = array();
    while ($project = db_fetch_object($results)) {
      $project->core_compatibility = unserialize($project->core_compatibility);
      $pager_results[$project->uri] = $project;
      $projects[$project->uri] = $project;
    }
    return $pager_results;
  }
  else {
    if (isset($uri)) {
      // A specific project was asked for.
      if (isset($projects[$uri])) {
        // Can be served from the local cache.
        return $projects[$uri];
      }
      // Not found in cache, so query and cache before returning.
      $result = db_query("SELECT * FROM {l10n_server_project} WHERE uri = '%s'", $uri);
      if ($project = db_fetch_object($result)) {
        $project->core_compatibility = unserialize($project->core_compatibility);
        $projects[$uri] = $project;
        return $project;
      }
    }
    else {
      // A list of all projects was asked for.
      $results = db_query('SELECT * FROM {l10n_server_project} ORDER BY uri');
      while ($project = db_fetch_object($results)) {
        $project->core_compatibility = unserialize($project->core_compatibility);
        $projects[$project->uri] = $project;
      }
      return $projects;
    }
  }
}

/**
 * Get all releases of a project.
 *
 * @param $uri
 *   Project code to look up releases for.
 * @param $parsed_only
 *   TRUE or FALSE depending on whether to return already
 *   parsed (translatable) releases.
 * @return
 *   Array of release objects for project.
 */
function l10n_server_get_releases($uri = NULL, $parsed_only = TRUE) {
  $releases = array();
  $query = "SELECT r.* FROM {l10n_server_release} r LEFT JOIN {l10n_server_project} p ON r.pid = p.pid WHERE p.uri = '%s'";
  if ($parsed_only) {
    $query .= ' AND r.last_parsed > 0';
  }
  $result = db_query($query, $uri);
  while ($release = db_fetch_object($result)) {
    $releases[] = $release;
  }
  return $releases;
}

/**
 * Get strings under some conditions.
 *
 * @param $options
 *   Array to filter strings. Either a langcode or project_uri is required.
 *   The following keys are used:
 *   - langcode
 *       Language code, for example: 'hu', 'pt-br', 'de', 'it' and so on.
 *   - project_uri
 *      URI of a project to filter to.
 *   - release
 *      Release title (version) of the particular project release to
 *      filter with. Only used if a project_uri was provided.
 *   - status
 *      Filter strings by status. See L10N_STATUS_ALL,
 *      L10N_STATUS_UNTRANSLATED, L10N_STATUS_SUGGESTED and
 *      L10N_STATUS_TRANSLATED.
 *
 *   - count
 *      Boolean to return the result count (TRUE) or the result itself (FALSE).
 *      If TRUE, 'pager' is not considered, and a number is returned only.
 *   - pager
 *      Number of strings to be returned.
 *      
 * @return
 *   An array of strings columns from database.
 *
 * @todo
 *   Implement status filters.
 */
function l10n_server_get_strings($options) {
  
  $sql = $sql_count = '';
  $sql_args = array();
  
  if (!isset($options['status'])) {
    // Default to all types of strings.
    $options['status'] = L10N_STATUS_ALL;
  }
  
  if (empty($options['langcode']) && empty($options['project_uri'])) {
    // No language or project filter -> only apply the status filter.
    $sql = 'SELECT s.value, s.plural, t.* FROM {l10n_server_string} s LEFT JOIN {l10n_server_translation} t ON s.sid = t.sid';
    // No need to join with translations for the count.
    $sql_count = 'SELECT COUNT(sid) FROM {l10n_server_string}';
  }
  
  elseif (!empty($options['langcode']) && empty($options['project_uri'])) {
    // Languge provided but no project -> apply language and status filter.
    $sql = "SELECT s.value, s.plural, t.* FROM {l10n_server_string} s LEFT JOIN {l10n_server_translation} t ON s.sid = t.sid WHERE t.language = '%s'";
    $sql_count = "SELECT COUNT(s.sid) FROM {l10n_server_string} s LEFT JOIN {l10n_server_translation} t ON s.sid = t.sid WHERE t.language = '%s'";
    $sql_args = array($options['langcode']);
  }
  
  elseif (!empty($options['project_uri']) && empty($options['langcode'])) {
    // Only project based filtering, no language filtering.
    $project = l10n_server_get_projects($options['project_uri']);
    $sql = "SELECT DISTINCT s.sid, s.value, s.plural, t.* FROM {l10n_server_release} r LEFT JOIN {l10n_server_file} f ON r.rid = f.rid LEFT JOIN {l10n_server_line} l ON f.fid = l.fid LEFT JOIN {l10n_server_string} s ON l.sid = s.sid LEFT JOIN {l10n_server_translation} t ON s.sid = t.sid WHERE r.pid = %d";
    // No need to join with translations for the count.
    $sql_count = "SELECT COUNT(DISTINCT(s.sid)) FROM {l10n_server_release} r LEFT JOIN {l10n_server_file} f ON r.rid = f.rid LEFT JOIN {l10n_server_line} l ON f.fid = l.fid LEFT JOIN {l10n_server_string} s ON l.sid = s.sid WHERE r.pid = %d";
    $sql_args = array($project->pid);
  }
  
  elseif (!empty($options['project_uri']) && !empty($options['langcode'])) {
    // Project *and* language based filtering.
    $project = l10n_server_get_projects($options['project_uri']);
    $sql = "SELECT DISTINCT s.sid, s.value, s.plural, t.tid, t.translation, t.uid, t.changed FROM {l10n_server_release} r LEFT JOIN {l10n_server_file} f ON r.rid = f.rid LEFT JOIN {l10n_server_line} l ON f.fid = l.fid LEFT JOIN {l10n_server_string} s ON l.sid = s.sid LEFT JOIN {l10n_server_translation} t ON s.sid = t.sid AND t.language = '%s' WHERE r.pid = %d";
    $sql_count = "SELECT COUNT(DISTINCT(s.sid)) FROM {l10n_server_release} r LEFT JOIN {l10n_server_file} f ON r.rid = f.rid LEFT JOIN {l10n_server_line} l ON f.fid = l.fid LEFT JOIN {l10n_server_string} s ON l.sid = s.sid LEFT JOIN {l10n_server_translation} t ON s.sid = t.sid AND t.language = '%s' WHERE r.pid = %d";
    $sql_args = array($options['langcode'], $project->pid);
    if (!empty($options['search'])) {
      // Search in the source or target strings.
      $sql_args[] = $options['search'];
      $sql_args[] = $options['search'];
      $search_sql = " AND (s.value LIKE '%%%s%%' OR t.translation LIKE '%%%s%%')";
      $sql .= $search_sql;
      $sql_count .= $search_sql;
    }
  }

  if (!empty($options['count']) && $sql_count) {
    // If a count is required, only run the count query.
    return db_result(db_query($sql_count, $sql_args));
  }
  elseif ($sql) {
    // Otherwise we either need a pager or a full result.
    if (!empty($options['pager'])) {
      $strings = pager_query($sql, $options['pager'], 0, $sql_count, $sql_args);
    }
    else {
      $strings = db_query($sql, $sql_args);
    }
    $result = array();
    while ($string = db_fetch_object($strings)) {
      $result[] = $string;
    }
    return $result;
  }
}
