<?php
// $Id: l10n_community.module,v 1.1.2.1 2007-09-28 17:05:54 goba Exp $

/**
 * @file
 *   A community web interface for Drupal project translation.
 *
 *   Builds on organic groups (og) and uses a connector (eg. l10n_drupalorg)
 *   to provide a convinient web interface for translators to collaborate 
 *   on Drupal project translations.
 */

/**
 * Open translation model, here all team members can translate.
 */
define('L10N_MODEL_OPEN', 0);

/**
 * Controlled translation model, where only admins can translate.
 */
define('L10N_MODEL_CONTROLLED', 1);

/**
 * Regular users have no permission to approve or suggest translations.
 */
define('L10N_PERM_NONE', 0);

/**
 * Translation group members have permission to suggest.
 */
define('L10N_PERM_SUGGEST', 1);

/**
 * User #1 and group administrators have permission to approve and
 * add translations without approval.
 */
define('L10N_PERM_ALL', 2);

/**
 * Strings with any status.
 */
define('L10N_STATUS_ALL', 0); 

/**
 * Untranslated strings only.
 */
define('L10N_STATUS_UNTRANSLATED', 1); 

/**
 * Has outstanding suggested translations.
 */
define('L10N_STATUS_HAS_SUGGESTION', 2); 

/**
 * Translated (and approved) strings only.
 */
define('L10N_STATUS_TRANSLATED', 3); 

// = Core hooks ================================================================

/**
 * Implementation of hook_help().
 *
 * Note that help texts link to groups which might not exist yet, therefore
 * these links might be broken. This is just a transitional problem though,
 * as once the functionality is set up, translation groups should form.
 */
function l10n_community_help($section) {
  global $user;
  
  switch ($section) {
    // Help text for language overview start page.
    case 'translate/languages':
      return '<p>'. t('Choose a language, and then either go to the project list or the group page. There is also a <a href="@by-project-link">by-project listing</a> available, which allows you to dig into languages from the project angle.', array('@by-project-link' => url('translate/projects'))) .'</p>';
    // Help for project overview start page.
    case 'translate/projects':
      return '<p>'. t('Choose a project, and then either export translation templates, or click on the project name to go to the language list to pick a language to translate to. There is also a <a href="@by-language-link">by-language listing</a> available, which allows you to dig into projects from the language angle.', array('@by-language-link' => url('translate/languages'))) .'</p>';
  }
  
  // Match actual translation editing or review pages with the two different path models they could have. 
  if (preg_match('!translate/languages/(?P<langcode>[^/]+)(/(?P<uri>[^/]+)(/(?P<action>import|export))?)?$!', $section, $args) ||
      (preg_match('!translate/projects/(?P<uri>[^/]+)(/(?P<langcode>[^/]+)(/(?P<action>import|export))?)?$!', $section, $args) &&
      !preg_match('!translate/projects/([^/]+)/export$!', $section) &&
      !preg_match('!translate/languages/([^/]+)/import$!', $section))) {
    $perm = isset($args['langcode']) ? l10n_community_get_permission($args['langcode']) : L10N_PERM_NONE;
    $languages = l10n_community_get_languages('name');
    $groups = l10n_community_get_groups();
    $permission_help = '';
    switch ($perm) {
      // Inform user about her permission level in this group.
      case L10N_PERM_NONE:
        $permission_help = t('You are not a member of this translation group, but you can still view the existing translations and export templates or translations for your own use.') .' '. ($user->uid ? t('<a href="@group">Subscribe to this group</a> if you would like to help out.', array('@group' => url('node/'. $groups[$args['langcode']]->nid))) : t('<a href="@register">Create an account or log in</a> and <a href="@group">subscribe to this group</a> if you would like to help out.', array('@register' => url('user'), '@group' => url('node/'. $groups[$args['langcode']]->nid))));
        break;
      case L10N_PERM_SUGGEST:
        $permission_help = t('You are a member of this translation group, so you can suggest translations and import complete Gettext translation files to suggest more strings at once. Administrators of this group will either accept or decline suggestions provided by members of the group. Feel free to export translation templates, or the current state of the translation if you are more comfortable working offline.');
        break;
      case L10N_PERM_ALL:
        $permission_help = t('As a member of this translation group, you can suggest translations as well as approve translations suggested by other members of the group. Export/import of Gettext translation files is also possible.');
        break;
    }

    // Now construct the actual help text depending on whether we have project or language values from the address. 
    if (isset($args['action'])) {
      // We have an import or export action. 
      switch ($args['action']) {
        case 'import':
          return '<p>'. $permission_help .' '. t('Because all project translations are shared, although you import this file for this project, it might provide translations for strings used in other projects too. This means that your actions can have impact easily on other project translations too.') .'</p>';
        case 'export':
          return '<p>'. $permission_help .' '. t('You have two different options to export. You can either export a template package for this project, or a package containing the existing translations for a given release. Both types will use the GNU Gettext Portable Object (Template) format, which is understood by Drupal and desktop translation editing tools.') . '</p>';
      }
    }
    else {
      // We are on some overview page.
      if (!isset($args['uri'])) {
        // Only language code is present => project list is shown.
        $output = '<p>'. t('This page shows a list of all projects and their overall translation status in this language (accumulated for all releases). The <a href="@group">%language group</a> pages might provide you with more information, translation suggestions and guidelines.', array('@group' => url('node/'. $groups[$args['langcode']]->nid), '%language' => $languages[$args['langcode']])) .' '. $permission_help .'</p>';
        return $output;
      }
      elseif (!isset($args['langcode'])) {
        // Only project code is present => language list is shown.
        $output = '<p>'. t('This page shows a list of all languages and their overall translation status (accumulated for all releases). Exporting translation works for all languages. Importing your translations is only possible to groups where have sufficient privileges to do so.') .'</p>';
        return $output;
      }
      else {
        // Language code and project both present.
        return '<p>'. $permission_help .'</p>';
      }
    }
  }
}

/**
 * Implementation of hook_menu().
 *
 * Note that all menu items are accessible to anyone, because
 * all functionality can be presented in a view-only form, which
 * anonymous users should be able to browse.
 */
function l10n_community_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    // Main menu items (cacheable). These are a small number of items, and
    // they are always the same, so we are safe to cache them.
    $items[] = array(
      'title' => t('Translate Drupal'),
      'path' => 'translate',
      'callback' => 'l10n_community_page_wrapper',
      'callback arguments' => array('welcome', 'l10n_community_welcome_page'),
      'access' => TRUE,
    );
    $items[] = array(
      'title' => t('Overview'),
      'path' => 'translate/overview',
      'access' => TRUE,
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -20,
    );
    $items[] = array(
      'title' => t('By language'),
      'description' => t('Overview of languages and their translation status.'),
      'path' => 'translate/languages',
      'callback' => 'l10n_community_page_wrapper',
      'callback arguments' => array('pages', 'l10n_community_overview_languages'),
      'access' => TRUE,
      'type' => MENU_LOCAL_TASK,
      'weight' => -10,
    );
    $items[] = array(
      'title' => t('By project'),
      'description' => t('Overview of projects and their translation status.'),
      'path' => 'translate/projects',
      'callback' => 'l10n_community_page_wrapper',
      'callback arguments' => array('pages', 'l10n_community_overview_projects'),
      'access' => TRUE,
      'type' => MENU_LOCAL_TASK,
      'weight' => -5,
    );
  }
  
  // Non-cachable menu items. These are numerous to generate for all languages and all projects,
  // so we are not caching them, and only generate on demand, when they are in need.    
  elseif (arg(0) == 'translate') {
    // AJAX callbacks for easy translation management.
    $items[] = array(
      'title' => t('String details'),
      'path' => 'translate/details',
      'callback' => 'l10n_community_page_wrapper',
      'callback arguments' => array('ajax', 'l10n_community_string_details'),
      'access' => TRUE,
      'type' => MENU_CALLBACK,
    );
    $items[] = array(
      'title' => t('Approve suggestion'),
      'path' => 'translate/approve',
      'callback' => 'l10n_community_page_wrapper',
      'callback arguments' => array('ajax', 'l10n_community_string_approve'),
      'access' => TRUE,
      'type' => MENU_CALLBACK,
    );
    
    drupal_add_css(drupal_get_path('module', 'l10n_community') .'/l10n_community.css', 'module');

    if (arg(1) == 'languages') {
      // Either a language overview screen or the user already choose a language.
      if (($langcode = arg(2)) && ($languages = l10n_community_get_languages('name')) && isset($languages[$langcode])) {
        // There is a valid language already choosen.
        $items[] = array(
          'title' => $languages[$langcode],
          'description' => t('Projects and their translation status.'),
          'path' => 'translate/languages/' . $langcode,
          'callback' => 'l10n_community_page_wrapper',
          'callback arguments' => array('pages', 'l10n_community_status_projects', $langcode),
          'access' => TRUE,
          'type' => MENU_CALLBACK,
        );
        $items[] = array(
          'title' => t('Import'),
          'path' => 'translate/languages/' . $langcode .'/import',
          'callback' => 'l10n_community_page_wrapper',
          'callback arguments' => array('import', 'l10n_community_import_page', $langcode),
          'type' => MENU_CALLBACK,
        );
        if (($uri = arg(3)) && ($projects = l10n_community_get_projects()) && isset($projects[$uri])) {
          // Menu items for project listing based on language.
          $items[] = array(
            'title' => t('Translate'),
            'path' => 'translate/languages/' . $langcode .'/'. $uri,
            'callback' => 'l10n_community_page_wrapper',
            'callback arguments' => array('pages', 'l10n_community_translate_page', $langcode, $uri),
            'access' => TRUE,
            'type' => MENU_CALLBACK,
          );
          // Tabs to translate, import and export projects.
          $items[] = array(
            'title' => t('Translate'),
            'path' => 'translate/languages/' . $langcode .'/'. $uri .'/translate',
            'type' => MENU_DEFAULT_LOCAL_TASK,
            'weight' => -10,
          );
          $items[] = array(
            'title' => t('Import'),
            'path' => 'translate/languages/' . $langcode .'/'. $uri .'/import',
            'callback' => 'l10n_community_page_wrapper',
            'callback arguments' => array('import', 'l10n_community_import_page', $langcode, $uri),
            'type' => MENU_LOCAL_TASK,
            'weight' => -5,
            'access' => l10n_community_get_permission($langcode) != L10N_PERM_NONE,
          );
          $items[] = array(
            'title' => t('Export'),
            'path' => 'translate/languages/' . $langcode .'/'. $uri .'/export',
            'callback' => 'l10n_community_page_wrapper',
            'callback arguments' => array('export', 'l10n_community_export_page', $uri, $langcode),
            'type' => MENU_LOCAL_TASK,
            'weight' => 0,
          );
        }
      }
    }
    
    elseif (arg(1) == 'projects') {
      if (($uri = arg(2)) && ($projects = l10n_community_get_projects()) && isset($projects[$uri])) {
        // We have a valid project name from the web address.
        $items[] = array(
          'title' => $projects[$uri]->title,
          'description' => t('Languages and their translation status.'),
          'path' => 'translate/projects/' . $uri,
          'callback' => 'l10n_community_page_wrapper',
          'callback arguments' => array('pages', 'l10n_community_status_languages', $uri),
          'access' => TRUE,
          'type' => MENU_CALLBACK,
        );
        $items[] = array(
          'title' => t('Export template'),
          'path' => 'translate/projects/' . $uri .'/export',
          'callback' => 'l10n_community_page_wrapper',
          'callback arguments' => array('export', 'l10n_community_export_page', $uri),
          'type' => MENU_CALLBACK,
        );
        if (($langcode = arg(3)) && ($languages = l10n_community_get_languages('name')) && isset($languages[$langcode])) {
          // Menu item for language listing based on project.
          $items[] = array(
            'title' => t('Translate'),
            'path' => 'translate/projects/' . $uri .'/'. $langcode,
            'callback' => 'l10n_community_page_wrapper',
            'callback arguments' => array('pages', 'l10n_community_translate_page', $langcode, $uri),
            'access' => TRUE,
            'type' => MENU_CALLBACK,
          );
          // Tabs to translate, import and export projects.
          $items[] = array(
            'title' => t('Translate'),
            'path' => 'translate/projects/' . $uri .'/'. $langcode .'/translate',
            'type' => MENU_DEFAULT_LOCAL_TASK,
            'weight' => -10,
          );
          $items[] = array(
            'title' => t('Import'),
            'path' => 'translate/projects/' . $uri .'/'. $langcode .'/import',
            'callback' => 'l10n_community_page_wrapper',
            'callback arguments' => array('import', 'l10n_community_import_page', $langcode, $uri),
            'type' => MENU_LOCAL_TASK,
            'weight' => -5,
            'access' => l10n_community_get_permission($langcode) != L10N_PERM_NONE,
          );
          $items[] = array(
            'title' => t('Export'),
            'path' => 'translate/projects/' . $uri .'/'. $langcode .'/export',
            'callback' => 'l10n_community_page_wrapper',
            'callback arguments' => array('export', 'l10n_community_export_page', $uri, $langcode),
            'type' => MENU_LOCAL_TASK,
            'weight' => 0,
          );
        }
      }
    }
    else {
      // Displaying the translation overview page. This is used to present admin page like panels.
      drupal_add_css(drupal_get_path('module', 'system') .'/admin.css', 'module');
    }
  }
  return $items;
}

/**
 * Implementation of hook_block().
 *
 * Guide users on the special chars in translatables.
 */
function l10n_community_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks = array(
        0 => array(
          'info' => t('Translation help'),
          'weight' => 0,
          'enabled' => 1,
          'region' => 'left'
        )
      );
      return $blocks;
    
    case 'view':
      // Named patterns used to support two URL forms and import/export action screens. See hook_help for information.
      if (preg_match('!translate/languages/(?P<langcode>[^/]+)/(?P<uri>[^/]+)!', $_GET['q'], $args) ||
          (preg_match('!translate/projects/(?P<uri>[^/]+)/(?P<langcode>[^/]+)!', $_GET['q'], $args) &&
          !preg_match('!translate/projects/([^/]+)/export!', $_GET['q']) &&
          !preg_match('!translate/languages/([^/]+)/import!', $_GET['q']))) {
        // Only show block if we have valuable and relevant information there.
        $languages = l10n_community_get_languages();
        $items = array();
        $items[] = t('!newline_image represents a line break. Remember to include a line break in the same position in the translation. Beginning and ending line breaks are saved properly, even if you miss to include them.', array('!newline_image' => ' <img src="'. base_path() . drupal_get_path('module', 'l10n_community') .'/images/newline.png" alt="'. t('Newline marker') . '" /> '));
        $items[] = t('Variables are designated with !, @ and % (like %example, !example or @example), and should be kept in the translated text as-is.');
        $formula = join(' ', preg_split('!(&&|\\|\\||%|<=|>=|==|\\!=|\\?|:)!', $languages[$args['langcode']]->formula, -1, PREG_SPLIT_DELIM_CAPTURE));
        $items[] = t('The plural formula in use with this language is %formula.', array('%formula' => str_replace('$n', 'n', $formula)));
        return array(
          'subject' => t('Translation help'),
          'content' => theme('item_list', $items),
        );
      }
  }
}

/**
 * Implemenation of hook_form_alter().
 * 
 * Take care of the one translation group per language limitation.
 *
 * @todo
 *   Figure out how to support formal/informal differences, local language versions and so on.
 *   These might need to maintain a diff, not a full translation, so we need to think about this.
 */
function l10n_community_form_alter($form_id, &$form) {
  if ($form_id == 'l10n_group_node_form' && empty($form['l10n_community_language']['#value']) && empty($form['l10n_community_language']['#options'])) {
    drupal_set_message(t("All available languages have groups now. You cannot create another group until a new language is added on the administration interface."), 'error');
    $form['submit']['#disabled'] = TRUE;
  }
}

// = Organic groups node type ==================================================

/**
 * Implementation of hook_node_info().
 *
 * We expose one node type to tie into the organic groups system, and maintain a list
 * of localization community related ones with their permission models.
 */
function l10n_community_node_info() {
  return array(
    'l10n_group' => array(
      'name' => t('Translation group'),
      'module' => 'l10n_community',
      'description' => t('A language community around Drupal project translations.'),
    )
  );
}

/**
 * Implementation of hook_insert().
 */
function l10n_community_insert(&$node) {
  db_query("INSERT INTO {l10n_community_group} (nid, language, model) VALUES (%d, '%s', %d)", $node->nid, $node->l10n_community_language, $node->l10n_community_model);
}

/**
 * Implementation of hook_delete().
 */
function l10n_community_delete(&$node) {
  db_query('DELETE FROM {l10n_community_group} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_update().
 */
function l10n_community_update($node) {
  if ($nid = db_result(db_query('SELECT nid FROM {l10n_community_group} WHERE nid = %d', $node->nid))) {
    db_query("UPDATE {l10n_community_group} SET language = '%s', model = %d WHERE nid = %d", $node->l10n_community_language, $node->l10n_community_model, $node->nid);
  }
  else {
    l10n_community_insert($node);
  }
}

/**
 * Implemenation of hook_load().
 */
function l10n_community_load(&$node) {
  return db_fetch_object(db_query('SELECT language AS l10n_community_language, model as l10n_community_model FROM {l10n_community_group} WHERE nid = %d', $node->nid));
}

/**
 * Implementation of hook_access().
 *
 * @todo
 *   Group admins should be able to edit their group nodes. Look into how others do it.
 */
function l10n_community_access($op, $node) {
  if ($op == 'view') { 
    // Users can always see the translation group page.
    return TRUE;
  }
  if (user_access('administer localization server')) { 
    // But only few can delete/edit.
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_form().
 */
function l10n_community_form(&$node) {
  $form = array();
  // Create a list of languages on the site having no translation group.
  $groups = db_query('SELECT language FROM {l10n_community_group}');
  $languages = l10n_community_get_languages('name');
  while ($group = db_fetch_object($groups)) {
    if ($languages[$group->language]) {
      unset($languages[$group->language]);
    }
  }
  
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Group name'),
    '#description' => t('Name of the translation group.'),
    '#default_value' => isset($node->title) ? $node->title : '',
    '#weight' => -5,
    '#required' => TRUE
  );
  if (!empty($node->l10n_community_language)) {
    // Already attached to a language, not possible to modify.
    $form['l10n_community_language'] = array(
      '#type' => 'item',
      '#title' => t('Language'),
      '#description' => t('The language managed by this group. This is not possible to modify.'),
      '#value' => $node->l10n_community_language,
      '#weight' => -5
    );
  }
  else {
    // Not yet attached to a language.
    $form['l10n_community_language'] = array(
      '#type' => 'select',
      '#title' => t('Language'),
      '#description' => t('The language managed by this group. Language not shown here are either not active on the site, or already have a translation group.'),
      '#options' => $languages,
      '#weight' => -5,
      '#required' => TRUE
    );
  }
  $form['l10n_community_model'] = array(
    '#type' => 'radios',
    '#title' => t('Permission model'),
    '#description' => t('Whether different types of group members have different permissions.'),
    '#default_value' => isset($node->l10n_community_model) ? $node->l10n_community_model : L10N_MODEL_OPEN,
    '#options' => array(
      L10N_MODEL_OPEN => t('Open. Everybody is equal, all members can suggest and approve translations.'), 
      L10N_MODEL_CONTROLLED => t('Controlled. Members can only suggest translations, group administrators can approve them.'),
    ),
    '#weight' => -3
  );
  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Welcome message'),
    '#description' => t('Welcome message to display on the group homepage.'),
    '#default_value' => isset($node->body) ? $node->body : '',
    '#rows' => 5,
  );
  $form['format'] = isset($node->format) ? filter_form($node->format) : filter_form();
  return $form;
}

// = Status pages ==============================================================

/**
 * Wrapper function for functionality implemented outside this module.
 *
 * The functionality implemented here is native to Drupal 6.
 */
function l10n_community_page_wrapper() {
  $args = func_get_args();
  $filename = array_shift($args);
  $function = array_shift($args);
  include_once drupal_get_path('module', 'l10n_community') .'/'. $filename .'.inc';
  return call_user_func_array($function, $args);
}

// = API functions =============================================================

/**
 * Helper function for language listing.
 *
 * @param $key
 *   Key name to restrict return value to.
 * @return
 *   If null, a list of language objects is returned, keyed by language code.
 *   Otherwise values referenced by $key are returned, keyed by language code.
 */
function l10n_community_get_languages($key = NULL) {
  static $languages = NULL;
  
  if (!isset($languages)) {
    $result = db_query("SELECT * FROM {locales_meta} WHERE locale != 'en' ORDER BY name ASC");
    $languages = array();
    while ($language = db_fetch_object($result)) {
      $languages[$language->locale] = $language;
    }
  }
  
  if (isset($key)) {
    // Build list of values with the specific key, if asked.
    $result = array();
    foreach ($languages as $language) {
      $result[$language->locale] = $language->$key;
    }
    return $result;
  }
  else {
    // Return full object list otherwise.
    return $languages;
  }
}

/**
 * Helper function for group listing.
 *
 * @return
 *   List of l10n_community_group objects keyed by language code.
 */
function l10n_community_get_groups() {
  static $groups = NULL;
  
  if (!isset($groups)) {
    $groups = array();
    $result = db_query('SELECT nid, language, model FROM {l10n_community_group}');
    while ($group = db_fetch_object($result)) {
      $groups[$group->language] = $group;
    }
  }
  
  return $groups;
}

/**
 * Get translation permission level for a specific user.
 *
 * The group permissio model is taken into account and membership of
 * the user in this group is checked.
 *
 * @param $langcode
 *   Language code, for example 'hu', 'pt-br', 'de' or 'it'.
 * @param $account
 *   Optional user account.
 * @return
 *   L10N_PERM_NONE, L10N_PERM_SUGGEST or L10N_PERM_ALL
 */
function l10n_community_get_permission($langcode, $account = NULL) {
  static $permissions = array();
  global $user;
  
  if (empty($langcode)) {
    return L10N_PERM_NONE;
  }
  if (!isset($account)) {
    $account = $user;
  }
  
  if (isset($permissions[$account->uid][$langcode])) {
    // Return cached value if available.
    return $permissions[$account->uid][$langcode];
  }
  
  // Initialize to lowest possible permission.
  $permissions[$account->uid][$langcode] = L10N_PERM_NONE;
  
  if ($account->uid == 1) {
    // The administrator has all permissions in all groups.
    return ($permissions[$account->uid][$langcode] = L10N_PERM_ALL);
  }

  if ($groups = l10n_community_get_groups()) {
    // Fill up local cache with all langcode permissions of this account for
    // future reference (eg. a page showing links for all languages).
    foreach ($groups as $group) {
      if (!empty($account->og_groups) and !empty($account->og_groups[$group->nid])) {
        if (!empty($account->og_groups[$group->nid]['is_admin'])) {
          // Administrators of groups have all permissions in the group.
          $permissions[$account->uid][$group->language] = L10N_PERM_ALL; 
        }
        else if ($account->og_groups[$group->nid]['is_active']) {
          // Members in the group have a permission depending on the model used.
          $permissions[$account->uid][$group->language] = ($group->model == L10N_MODEL_OPEN ? L10N_PERM_ALL : L10N_PERM_SUGGEST);
        }
        else {
          // Otherwise permission to view, no permission to write.
          $permissions[$account->uid][$group->language] = L10N_PERM_NONE;
        }
      }
    }
  }
  
  // Return from local cache.
  return $permissions[$account->uid][$langcode];
}

/**
 * Provides a list of projects from the database, ordered by uri.
 *
 * @param $uri
 *   Project URI, if requesting information about one project only.
 *   If not specified, information about all projects is returned.
 * @param $pager
 *   Number of projects to return a pager query result with. If NULL,
 *   all projects are returned.
 * @return
 *   An associative array keyed with project uris.
 */
function l10n_community_get_projects($uri = NULL, $pager = NULL) {
  static $projects = array();
  
  if (isset($pager)) {
    // If a pager view was asked for, collect data independently.
    $results = pager_query('SELECT * FROM {l10n_community_project} ORDER BY uri', $pager, 0, NULL);
    $pager_results = array();
    while ($project = db_fetch_object($results)) {
      $pager_results[$project->uri] = $project;
      // Save project information for later, if someone asks for it by uri.
      $projects[$project->uri] = $project;
    }
    return $pager_results;
  }
  else {
    if (isset($uri)) {
      // A specific project was asked for.
      if (isset($projects[$uri])) {
        // Can be served from the local cache.
        return $projects[$uri];
      }
      // Not found in cache, so query and cache before returning.
      $result = db_query("SELECT * FROM {l10n_community_project} WHERE uri = '%s'", $uri);
      if ($project = db_fetch_object($result)) {
        $projects[$uri] = $project;
        return $project;
      }
    }
    else {
      // A list of *all* projects was asked for.
      $results = db_query('SELECT * FROM {l10n_community_project} ORDER BY uri');
      while ($project = db_fetch_object($results)) {
        $projects[$project->uri] = $project;
      }
      return $projects;
    }
  }
}

/**
 * Get all releases of a project.
 *
 * @param $uri
 *   Project code to look up releases for.
 * @param $parsed_only
 *   If TRUE, only releases which already have their tarballs downloaded and
 *   parsed for translatables are returned. Otherwise all releases recorded in
 *   the database are returned.
 * @return
 *   Array of release objects for project, keyed by release id.
 */
function l10n_community_get_releases($uri, $parsed_only = TRUE) {
  $releases = array();
  $query = "SELECT r.* FROM {l10n_community_release} r LEFT JOIN {l10n_community_project} p ON r.pid = p.pid WHERE p.uri = '%s'";
  if ($parsed_only) {
    $query .= ' AND r.last_parsed > 0';
  }
  $result = db_query($query, $uri);
  while ($release = db_fetch_object($result)) {
    $releases[$release->rid] = $release;
  }
  return $releases;
}

/**
 * Get strings under some conditions.
 *
 * @param $project
 *   Project object to look up strings for.
 * @param $langcode
 *   Language code to use for the lookup.
 * @param $status
 *   Filter strings by status. See L10N_STATUS_ALL,
 *   L10N_STATUS_UNTRANSLATED, L10N_STATUS_HAS_SUGGESTION and
 *   L10N_STATUS_TRANSLATED.
 * @param $release
 *   Release id of the particular project release to filter with.
 *   Use NULL to not filter on releases.
 * @param $search
 *   Substring to search for in all source and translation strings.
 * @param $pager
 *   Number of strings to be returned in a pager. Should be NULL if
 *   no pager should be used.
 * @return
 *   An array of string records from database.
 */
function l10n_community_get_strings($project, $langcode, $status = L10N_STATUS_ALL, $release = NULL, $search = NULL, $pager = NULL) {
  
  $sql = $sql_count = '';
  $sql_args = array();
  
  // Project and language based filtering built in.
  $sql = "SELECT DISTINCT s.sid, s.value, t.tid, t.language, t.translation, t.uid_entered, t.uid_approved, t.time_entered, t.time_approved, t.has_suggestion, t.is_suggestion, t.is_active FROM {l10n_community_release} r INNER JOIN {l10n_community_file} f ON r.rid = f.rid INNER JOIN {l10n_community_line} l ON f.fid = l.fid INNER JOIN {l10n_community_string} s ON l.sid = s.sid LEFT JOIN {l10n_community_translation} t ON s.sid = t.sid AND t.language = '%s' AND t.is_active = 1 AND t.is_suggestion = 0 WHERE r.pid = %d";
  $sql_count = "SELECT COUNT(DISTINCT(s.sid)) FROM {l10n_community_release} r INNER JOIN {l10n_community_file} f ON r.rid = f.rid INNER JOIN {l10n_community_line} l ON f.fid = l.fid INNER JOIN {l10n_community_string} s ON l.sid = s.sid LEFT JOIN {l10n_community_translation} t ON s.sid = t.sid AND t.language = '%s' AND t.is_active = 1 AND t.is_suggestion = 0 WHERE r.pid = %d";
  $sql_args = array($langcode, $project->pid);

  if (!empty($search)) {
    // Search in the source or target strings.
    $sql_args[] = $search;
    $sql_args[] = $search;
    $search_sql = " AND (s.value LIKE '%%%s%%' OR t.translation LIKE '%%%s%%')";
    $sql .= $search_sql;
    $sql_count .= $search_sql;
  }

  if (isset($release)) {
    // Release restriction.
    $sql_args[] = $release;
    $sql_args[] = $release;
    $release_sql = ' AND r.rid = %d';
    $sql .= $release_sql;
    $sql_count .= $release_sql;
  }
    
  // Restriction based on string status.
  switch ($status) {
    case L10N_STATUS_UNTRANSLATED:
      // We are doing a LEFT JOIN especially to look into the case, when we have nothing 
      // to match in the translation table, but we still have the string. (We get our 
      // records in the result set in this case). The translation field is empty or
      // NULL in this case, as we are not allowing NULL there and only saving an empty
      // translation if there are suggestions but no translation yet.
      $status_sql = " AND (t.translation is NULL OR t.translation = '')";
      $sql .= $status_sql;
      $sql_count .= $status_sql;
      break;
    case L10N_STATUS_TRANSLATED:
      $status_sql = " AND t.translation != ''";
      $sql .= $status_sql;
      $sql_count .= $status_sql;
      break;
    case L10N_STATUS_HAS_SUGGESTION:
      // Note that we are not searching in the suggestions themselfs, only
      // the source and active translation values. The user interface underlines
      // that we are  looking for strings which have suggestions, not the
      // suggestions themselfs.
      $status_sql = " AND t.has_suggestion = 1";
      $sql .= $status_sql;
      $sql_count .= $status_sql;
      break;
    case L10N_STATUS_ALL:
    default:
      // Leave query alone on this case.
      break;
  }

  // We either need a pager or a full result.
  if (isset($pager)) {
    $strings = pager_query($sql, $pager, 0, $sql_count, $sql_args);
  }
  else {
    $strings = db_query($sql, $sql_args);
  }
  $result = array();
  while ($string = db_fetch_object($strings)) {
    $result[] = $string;
  }
  return $result;
}

/**
 * Get string counts for summaries.
 *
 * @param $type
 *   Type of string count to return:
 *     - all:       count of all strings
 *     - project:   count of strings in one project (identified by $id)
 *     - languages: array of the count of translated strings and suggestions by langcode
 *     - projects:  array of the count of translated strings and suggestions by pid
 * @param $id
 *   The project id when the 'project' type is used. The result set can be
 *   restricted by an ID from the oppposing type for the later two types.
 *   Eg. 'projects' summaries can be restricted to one specific language, or
 *   'languages' summeries can be restricted to one specific project. This
 *   id represents the identifier (pid or langcode) of the restricting item.
 *   For the 'all' type, this value is discarded.
 *
 * @todo
 *   These queries are *slooow*. The query cache helps a lot with caching the
 *   result, so the slowness only shows for the first run, but still it would
 *   be good to look into optimizing these.
 */
function l10n_community_get_string_count($type, $id = NULL) {
  switch ($type) {
    case 'all':
      // Return a count of all strings.
      return db_result(db_query("SELECT COUNT(sid) FROM {l10n_community_string}"));
    
    case 'project':
      // Return a count of all strings in this project, id required.
      return db_result(db_query('SELECT COUNT(DISTINCT s.sid) FROM {l10n_community_release} r INNER JOIN {l10n_community_file} f ON r.rid = f.rid INNER JOIN {l10n_community_line} l ON f.fid = l.fid INNER JOIN {l10n_community_string} s ON l.sid = s.sid WHERE r.pid = %d', $id));
    
    case 'languages':
      // Summeries based on language codes, restricted to a specific project if $id is set.
      $sums = array();
      if (!isset($id)) {
        // Simple count query if we are not filtering by project.
        $count_sql = 'SELECT COUNT(t.sid) translation_count, t.language, t.is_suggestion FROM {l10n_community_string} s LEFT JOIN {l10n_community_translation} t ON s.sid = t.sid WHERE t.is_active = 1 AND t.translation != "" GROUP BY t.language, t.is_suggestion';
      }
      else {
        // Rather complex join if we also need to factor the project in.
        $count_sql = 'SELECT COUNT(DISTINCT t.sid) translation_count, t.language, t.is_suggestion FROM {l10n_community_release} r INNER JOIN {l10n_community_file} f ON r.rid = f.rid INNER JOIN {l10n_community_line} l ON f.fid = l.fid INNER JOIN {l10n_community_string} s ON l.sid = s.sid LEFT JOIN {l10n_community_translation} t ON s.sid = t.sid WHERE r.pid = %d AND t.is_active = 1 AND t.translation != "" GROUP BY t.language, t.is_suggestion';
      }
      $result = db_query($count_sql, $id);
      while ($row = db_fetch_object($result)) {
      	if (!isset($sums[$row->language])) {
      	  // Set default zeroes for summaries.
          $sums[$row->language] = array(0, 0);
      	}
        // Fill in the 0 or 1 element based on whether we have a result
        // for suggestions or translations.
        $sums[$row->language][(int) $row->is_suggestion] = $row->translation_count;
      }
      return $sums;
      break;
    
    case 'projects':
      // Get summaries by projects. Restricted to a specific language, if $id is set.
      
      // First get the count of strings available for translation.
      $sums = $count_args = array();
      $result = db_query("SELECT COUNT(DISTINCT s.sid) string_count, r.pid FROM {l10n_community_release} r INNER JOIN {l10n_community_file} f ON r.rid = f.rid INNER JOIN {l10n_community_line} l ON f.fid = l.fid INNER JOIN {l10n_community_string} s ON l.sid = s.sid GROUP BY r.pid;");
      while ($row = db_fetch_object($result)) {
        // Initialize remaining fields to zeroes too.
        $sums[$row->pid] = array($row->string_count, 0, 0);
      }
      // Get the count of distinct strings translated and suggestions per project.
      $count_sql = 'SELECT COUNT(DISTINCT t.sid) translation_count, r.pid, t.is_suggestion FROM {l10n_community_release} r INNER JOIN {l10n_community_file} f ON r.rid = f.rid INNER JOIN {l10n_community_line} l ON f.fid = l.fid INNER JOIN {l10n_community_string} s ON l.sid = s.sid LEFT JOIN {l10n_community_translation} t ON s.sid = t.sid WHERE t.is_active = 1 AND t.translation != "" ';
      if (isset($id)) {
        // Limit to language if desired.
        $count_sql .= "AND t.language = '%s' ";
        $count_args[] = $id;
      }
      $count_sql .= 'GROUP BY r.pid, t.is_suggestion';
      $result = db_query($count_sql, $count_args);
      while ($row = db_fetch_object($result)) {
        // Fill up the zero spots we added above with real data.
        $sums[$row->pid][((int) $row->is_suggestion) + 1] = $row->translation_count;
      }
      return $sums;
  }
}

/**
 * Save a translated string into database.
 *
 * @param $sid
 *   Source string identifier.
 * @param $translation
 *   The translation string.
 * @param $langcode
 *   Language code, for example: 'hu', 'pt-br', 'de', 'it' and so on.
 * @param $uid
 *   User ID.
 * @param $suggestion
 *   TRUE if $translation is a suggestion, FALSE otherwise.
 * @param $inserted
 *   Counter to increment if insert is made.
 * @param $updated
 *   Counter to increment if update is made.
 * @param $unchanged
 *   Counter to increment if nothing is changed.
 * @param $suggested
 *   Counter to increment if a suggestion was saved.
 *
 * @todo
 *   Take care of trailing and leading whitespace.
 * @todo
 *   Note that we are not tracking if the user entered something which
 *   was an existing active suggestion, in which case a new suggestion
 *   is added. This is an edge case, but possibly not desired.
 */
function l10n_community_target_save($sid, $translation, $langcode, $uid, $suggestion, &$inserted, &$updated, &$unchanged, &$suggested) {
  
  // Look for an existing active translation.
  $existing_string = db_fetch_object(db_query("SELECT sid, tid, translation FROM {l10n_community_translation} WHERE sid = %d AND language = '%s' AND is_suggestion = 0 AND is_active = 1", $sid, $langcode));
  
  if (isset($existing_string->sid)) {
    // We have an active translation.
    if ($existing_string->translation != $translation) {
      // And what we should save now is different.
      if ($suggestion) {
        // Saving a suggestion, so set flag on translation.
        db_query("UPDATE {l10n_community_translation} SET has_suggestion = 1 WHERE tid = %d", $existing_string->tid);
        $suggested++;
      }
      else {
        // Saving a different translation -> deactivate previous translations and suggestions.
        db_query("UPDATE {l10n_community_translation} SET is_active = 0 WHERE sid = %d AND language = '%s';", $sid, $langcode);
        $updated++;
      }
      db_query("INSERT INTO {l10n_community_translation} (sid, translation, language, uid_entered, time_entered, uid_approved, time_approved, is_suggestion, is_active) VALUES (%d, '%s', '%s', %d, %d, %d, %d, %d, 1)", $sid, $translation, $langcode, $uid, time(), ($suggestion ? 0 : $uid), ($suggestion ? 0 : time()), $suggestion);
    }
    else {
      // Same string as existing translation. 
      $unchanged++;
    }
  }
  
  else {
    // No active translation exists.
    if ($suggestion) {
      // No translation yet -> INSERT empty placeholder so we can track suggestions.
      db_query("INSERT INTO {l10n_community_translation} (sid, translation, language, uid_entered, time_entered, has_suggestion, is_active) VALUES (%d, '', '%s', 0, %d, 1, 1)", $sid, $langcode, time());
      db_query("INSERT INTO {l10n_community_translation} (sid, language, translation, uid_entered, time_entered, is_suggestion, is_active) VALUES (%d, '%s', '%s', %d, %d, 1, 1)", $sid, $langcode, $translation, $uid, time());
      $suggested++;
    }
    else {
      // No active translation yet -> INSERT.
      db_query("INSERT INTO {l10n_community_translation} (sid, translation, language, uid_entered, time_entered, is_active) VALUES (%d, '%s', '%s', %d, %d, 1)", $sid, $translation, $langcode, $uid, time());
      $inserted++;
    }
  }
}

/**
 * Set a message based on the number of translations changed.
 * 
 * Used by both the save and import process.
 */
function l10n_community_update_message($inserted, $updated, $unchanged, $suggested) {
  // Inform user about changes made.
  $message = array();
  if ($inserted) {
    $message[] = format_plural($inserted, '1 new translation added', '@count new translations added');
  }
  if ($suggested) {
    $message[] = format_plural($suggested, '1 new suggestion added', '@count new suggestions added');
  }
  if ($updated) {
    $message[] = format_plural($updated, '1 translation updated', '@count translations updated');
  }
  if ($unchanged) {
    $message[] = format_plural($unchanged, '1 translation unchanged', '@count translations unchanged');
  }
  if (count($message)) {
    drupal_set_message(join(', ', $message) .'.');
  }
}
