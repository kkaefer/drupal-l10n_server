$Id: ARCHITECTURE.txt,v 1.1.2.2 2007-08-17 21:56:59 goba Exp $

This document explains how the l10n_* module suite is supposed to work together,
and interact with other modules. The figures in this directory may also help
understand how the different components fit together. This document is also used
to track TODO items, as there are still holes in the big picture to plug in.

l10n_server
--------------------------------------------------------------------------------

1. l10n_server maintains a list of projects and releases syncronized with
   drupal.org. It uses the updates.drupal.org XML file interface to grab
   a project list and releases for each project.
   
   TODO: there is a project list stub implemented, real implementation is
   possible once this patch is committed: http://drupal.org/node/157514
   
   TODO: because release lists are tied to Drupal core compatibility terms,
   we cannot query all releases at once yet: http://drupal.org/node/165068
   
2. Syncronization with the project list is always performed, and a project
   is picked to retrieve list of releases for. Then the releases are
   traversed, tarballs are downloaded and uncompressed.
   
3. Potx is run on the uncompressed package to collect a list of strings
   used in the file *and* record a list of extraction errors.
   
   TODO: integrate with drupal.org by pushing back at least a summary
   of the errors found (could be used for project metrics)
   
4. Extracted strings are stored related to projects, releases, files
   and lines. So if a string appears multiple times in the same file
   but on different lines, these are stored as separate relations.
   Strings are only stored once, relations are made between lines and
   strings.
   
   This means that if strings in all releases of a project are required,
   we need to join projects to releases to files to lines to strings.
   For strings in a specific project release or file or line, the joins
   are simpler obviously.
   
   Because strings are handled with their numeric (auto incremented)
   ID, it is possible to have two identical strings with different
   numbers stored (although the current system does not support this,
   and there is no plan to implement this). That would make it possible
   to provide different translations for the same string used in
   different releases. It should not be allowed however to have different
   translations of the same string in projects which could be used
   together on a Drupal site, due to how Drupal enforces translation
   sharing.
   
l10n_community
--------------------------------------------------------------------------------

1. The community server is designed to work with Organic Groups. Each language
   has one organic group on the site, which provides a discusson space for
   group members *and* makes it possible to hand out permissions (ie.
   differentiate between group managers and members if a group needs this
   level of permission).
   
   TODO: let the language group choose the permission model (ie. everybody
   can submit "final" translations or strings need to be approved by group
   managers)
   
2. Translations can be approached from the list of language groups or the
   list of projects. On the second level, the other list shows (ie. after
   selecting a language, one needs to select a project and vice versa).
   These two interfaces allow people to get different overviews (summaries)
   of the translations hosted on the site, as well as make it possible to
   import and export translations based on languages or projects.
   
3. Translation can either happen on the site (which only requires a user
   account subscribed to at least one translation group) or off-site. The
   online interface should allow translators to provide suggestions for
   strings as well as mark their translations as "to be reviewed" when
   not sure about how fine it is.
   
   TODO: implement suggestions
   TODO: implement "to be reviewed" (fuzzy) flag on strings
   TODO: implement string editing history

4. Off-site translation support is possible with exporting Gettext PO(T)
   files of a specific project release. Translators can work with offline
   translation tools and import the modified PO files later.
   
   TODO: implement PO(T) file export (big projects will be tricky,
   they require a directory structure built, not a simple standalone file)
   
5. Integration with drupal.org makes it possible to list translation
   packages and offer them for download for each project release. The
   translation status summary can also be used as part of the metrics
   used to rate projects.
   
   TODO: implement this direction of the integration
   
l10n_client
--------------------------------------------------------------------------------

Although this module is hosted in its own project, it is a good idea to document
it here because of the relations of architecture. l10n_client only works with
Drupal 6 and later because it requires a change made in Drupal 6 to work.

1. By enabling locale module and l10n_client and adding at least one foreign
   language, when viewing pages in foreign languages, people with 'use on-page
   translation' permission associated can see a form to translate strings used
   to build the page viewed. Translations are saved with AJAX callbacks, so
   on-page translation is easy.
   
   TODO: implement rich user feedback
   TODO: make this look cool
   
2. Users of l10n_client should be able to opt to share their translations as
   they produce it, so there should be a component in l10n_community to receive
   translation suggestions from group members using the external (from the
   localization server point of view) l10n_client.
   
   TODO: implement server part in l10n_community
   TODO: implement client part in l10n_client
