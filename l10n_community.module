<?php
// $Id: l10n_community.module,v 1.1.2.2 2007-07-03 20:56:01 goba Exp $

/**
 * @file
 *   A community web interface for Drupal project translation.
 *
 *   Build on organic groups to provide a convinient web interface
 *   for translators to collaborate on Drupal project translations.
 */

/**
 * Regular users have no permission to approve or suggest translations
 */
define('L10N_PERM_NONE', 0);

/**
 * Translation team members have permission to suggest.
 */
define('L10N_PERM_SUGGEST', 1);

/**
 * User #1 and team administrators have permission to approve and
 * add translations without approval.
 */
define('L10N_PERM_ALL', 2);

// = Core hooks ================================================================

/**
 * Implementation of hook_help().
 */
function l10n_community_help($section) {
  switch ($section) {
    case 'translations':
      return '<p>'. t('This is an overview of all the translations hosted on this web site with their overall status indicators. Click on a language team to dig deeper.') .'</p>';
  }
  if (preg_match('!translations/[^/]+$!', $section)) {
    return '<p>'. t('Members of this translation team can click through to the projects to translate them. If you are not a member, but are intested in helping ou, subscribe now!') .'</p>';
  }
  if (preg_match('!translations/([^/]+)/([^/]+)!', $section, $args)) {
    $perm = l10n_community_get_permission($args[1]);
    switch ($perm) {
      // Inform user about her permission level in this group.
      case L10N_PERM_NONE:
        $output = t('You are not a member of this translation team, but you can still view the existing translations and export templates or translations for your own use. Join this group if you would like to help out translating.');
        break;
      case L10N_PERM_SUGGEST:
        $output = t('You are a member of this translation team, so you can suggest translations and import complete Gettext translation files to suggest more strings at once. Administrators of this group will either accept or decline suggestions provided by the group. Feel free to export translation templates, or the current state of this project translation if you are more comfortable working offline.');
        break;
      case L10N_PERM_ALL:
        $output = t('As an administrator of this translation team, you can approve translations suggested by te members of this translation group and export/import Gettext translation files.');
        break;
    }
    return '<p>'. $output .'</p>';
  }
}

/**
 * Implementation of hook_menu().
 *
 * @todo All menu items are accessible to everyone, rethink this.
 */
function l10n_community_menu($may_cache) {
  $items = array();
  if (!$may_cache) {
    drupal_add_css(drupal_get_path("module", "l10n_community") ."/l10n_community.css");

    $items[] = array(
      'title' => t('Translations'),
      'description' => t('All languages and their translation status.'),
      'path' => 'translations',
      'callback' => 'l10n_community_status_languages',
      'access' => TRUE,
    );
    
    if (arg(0) == 'translations') {
      // Menu items for languages if under 'translations'.
      foreach (l10n_community_languages() as $langcode => $language) {
        $items[] = array(
          'title' => $language,
          'description' => t('Projects and their translation status.'),
          'path' => 'translations/' . $langcode,
          'callback' => 'l10n_community_status_projects',
          'callback arguments' => array($langcode),
          'access' => TRUE,
        );
      }
      if ($langcode = arg(1)) {
        // Menu items for projects if under one specific language.
        foreach (l10n_server_get_projects() as $project_code => $project) {
          $items[] = array(
            'title' => t('Translate "@project"', array('@project' => $project->project)),
            'path' => 'translations/' . $langcode .'/'. $project_code,
            'callback' => 'l10n_community_translate_page',
            'callback arguments' => array($langcode, $project_code),
            'access' => TRUE,
            'type' => MENU_CALLBACK,
          );
        }
        if ($project_code = arg(2)) {
          // Menu items to translate, import and export projects.
          $items[] = array(
            'title' => t('Translate'),
            'path' => 'translations/' . $langcode .'/'. $project_code .'/translate',
            'type' => MENU_DEFAULT_LOCAL_TASK,
            'weight' => -10,
          );
          $items[] = array(
            'title' => t('Import'),
            'path' => 'translations/' . $langcode .'/'. $project_code .'/import',
            'type' => MENU_LOCAL_TASK,
            'weight' => -5,
          );
          $items[] = array(
            'title' => t('Export'),
            'path' => 'translations/' . $langcode .'/'. $project_code .'/export',
            'type' => MENU_LOCAL_TASK,
            'weight' => 0,
          );
          
          $action = arg(3);
          if (empty($action) || $action == 'translate') {
            // String status selectors for the translation screen.
            $status = array(
              L10N_STATUS_ALL => array(t('All'), -10, MENU_DEFAULT_LOCAL_TASK),
              L10N_STATUS_UNTRANSLATED => array(t('Untranslated'), -5, MENU_LOCAL_TASK),
              L10N_STATUS_SUGGESTED => array(t('Suggested'), -2, MENU_LOCAL_TASK),
              L10N_STATUS_TRANSLATED => array(t('Translated'), 0, MENU_LOCAL_TASK),
            );
            $mapping = l10n_community_status_indicators();
            foreach ($status as $key => $item) {
              $items[] = array(
                'title' => $item[0],
                'path' => 'translations/' . $langcode .'/'. $project_code .'/translate/'. $mapping[$key],
                'callback' => 'l10n_community_translate_page',
                'callback arguments' => array($langcode, $project_code, $key),
                'type' => MENU_LOCAL_TASK,
                'weight' => $item[1],
              );
            }
          }
        }
      }
    }

    $items[] = array(
      'title' => t('Translate'),
      'description' => t('Import existing PO files.'),
      'path' => 'translations/import',
      'callback' => 'drupal_get_form',
      'callback arguments' => array('l10n_community_import_form', arg(2), arg(3)),
      'type' => MENU_CALLBACK,
      'access' => TRUE,
    );
  }
  return $items;
}

/**
 * Implementation of hook_block().
 */
function l10n_community_block($op = 'list', $delta = 0, $edit = array()) {
  global $user;
  
  switch ($op) {
    case 'list':
      $blocks = array(
        0 => array(
          'info' => t('Translation help'),
          'weight' => 0,
          'enabled' => 1,
          'region' => 'left'
        )
      );
      return $blocks;
    
    case 'view':
      $items = array();
      $items[] = t('!newline_image represents a line break. Remember to include a line break in the same position in the translation, even if it is at the beginning or end!', array('!newline_image' => ' <img src="'. base_path() . drupal_get_path('module', 'l10n_community') .'/img/si_newline.png" alt="'. t('Newline marker.') . '" /> '));
      $items[] = t('Variables are designated with !, @ and % (like %example, !example or @example), and should be kept in the text as-is.');
      return array(
        'subject' => t('Translation help'),
        'content' => theme('item_list', $items),
      );
  }
}

// = Organic group node type ===================================================

/**
 * Implementation of hook_node_info().
 */
function l10n_community_node_info() {
  return array(
    'l10n_team' => array(
      'name' => t('Translation team'),
      'module' => 'l10n_community',
      'description' => t('A language community around Drupal project translations.'),
    )
  );
}

/**
 * Implementation of hook_insert().
 */
function l10n_community_insert(&$node) {
  db_query("INSERT INTO {l10n_server_team} (nid, locale) VALUES (%d, '%s')", $node->nid, $node->locale_team);
}

/**
 * Implementation of hook_delete().
 */
function l10n_community_delete(&$node) {
  db_query('DELETE FROM {l10n_server_team} WHERE nid = %d', $node->nid);
}

/**
 * Implemenation of hook_load().
 */
function l10n_community_load(&$node) {
  return db_fetch_object(db_query('SELECT locale AS locale_team FROM {l10n_server_team} WHERE nid = %d', $node->nid));
}

/**
 * Implementation of hook_access().
 */
function l10n_community_access($op, $node) {
  if ($op == 'view') { 
    // Users can always see the translation team page.
    return TRUE;
  }
  if (user_access('administer localization server')) { 
    // But only few can delete/edit.
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_form().
 */
function l10n_community_form(&$node) {
  $form = array();
  // Create a list of languages on the site having no translation team.
  $teams = db_query('SELECT locale FROM {l10n_server_team}');
  if ($languages = locale_supported_languages(FALSE, TRUE)) {
    while ($team = db_fetch_object($teams)) {
      if ($languages['name'][$team->locale]) {
        unset($languages['name'][$team->locale]);
      }
    }
  }
  // Also unset English as it is the Drupal default language.
  unset($languages['name']['en']); 
  
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Team name'),
    '#description' => t('Name of the translation team.'),
    '#default_value' => isset($node->title) ? $node->title : '',
    '#weight' => -5,
    '#required' => TRUE
  );
  if (!empty($node->locale_team)) {
    // Already attached to a language, not possible to modify.
    $form['locale_team'] = array(
      '#type' => 'item',
      '#title' => t('Language'),
      '#description' => t('The language managed by this team.'),
      '#value' => $node->locale,
      '#weight' => -5
    );
  }
  else {
    // Not yet attached to a language.
    $form['locale_team'] = array(
      '#type' => 'select',
      '#title' => t('Language'),
      '#description' => t('The language managed by this team.'),
      '#options' => $languages['name'],
      '#weight' => -5,
      '#required' => TRUE
    );
  }
  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Welcome message'),
    '#description' => t('Welcome message to display on the team homepage.'),
    '#default_value' => isset($node->body) ? $node->body : '',
    '#rows' => 5,
  );
  $form['format'] = isset($node->format) ? filter_form($node->format) : filter_form();
  return $form;
}

// = Status pages ==============================================================

/**
 * Translation status overview for all languages.
 */
function l10n_community_status_languages() {
  if ($languages = l10n_community_languages()) {
    if (!$num_source = db_result(db_query('SELECT COUNT(sid) FROM {l10n_server_source}'))) {
      drupal_set_message(t('No strings to translate.'), 'error');
      return;
    }
    $table = array();
    foreach ($languages as $langcode => $language) {
      $num_suggested = l10n_server_get_strings($langcode, L10N_STATUS_SUGGESTED, TRUE);
      $num_translated = l10n_server_get_strings($langcode, L10N_STATUS_TRANSLATED, TRUE);
      $table[] = array_merge(array(l("$language ($langcode)", 'translations/'. $langcode)), theme('l10n_progress_columns', $num_source, $num_translated, $num_suggested));
    }
    return theme('table', array(t('Language'), t('Status'), t('Translated'), t('Suggested'), t('Untranslated')), $table);
  }
  drupal_set_message(t('No languages to list.'), 'error');
}

/**
 * Translation status page of all projects from a given language.
 *
 * @param $langcode
 *   Language code, for example 'hu', 'pt-br', 'de', 'it'.
 */
function l10n_community_status_projects($langcode = NULL) {
  global $user;

  if (!isset($langcode)) {
    drupal_set_message(t('No language selected.'), 'error');
    return;
  }
  
  if ($projects = l10n_server_get_projects(10)) {
    $output = theme("pager", NULL, 10, 0);
    $table = array();
    foreach ($projects as $project_code => $project) {
      $num_source = db_result(db_query("SELECT COUNT(ts.sid) FROM {l10n_server_source} ts WHERE project = '%s'", $project_code));
      if (!empty($num_source)) {
        $num_suggested = l10n_server_get_strings($langcode, L10N_STATUS_SUGGESTED, TRUE, $project_code);
        $num_translated = l10n_server_get_strings($langcode, L10N_STATUS_TRANSLATED, TRUE, $project_code);
        $table[] = array_merge(array(l($project->project, 'translations/'. $langcode .'/' . $project_code)), theme('l10n_progress_columns', $num_source, $num_translated, $num_suggested));
      }
      $select_project[$project_code] = $project->project;
    }
    $output .= theme('table', array(t('Language'), t('Status'), t('Translated'), t('Suggested'), t('Untranslated')), $table);
    $output .= theme("pager", NULL, 10, 0);
  }
  return $output;
}

// = Translation web interface =================================================

function l10n_community_translate_page($langcode = NULL, $project = NULL, $filter = NULL) {
  if (!isset($filter)) {
    if (isset($_SESSION['translate_filter'])) {
      // Redirect to remembered filtered page if previously set.
      $mapping = l10n_community_status_indicators();
      drupal_goto('translations/'. $langcode .'/'. $project .'/translate/'. $mapping[$_SESSION['translate_filter']]);
    }
    else {
      // Default to ALL filter.
      $filter = L10N_STATUS_ALL;
    }
  }
  // Remember filter for later use.
  $_SESSION['translate_filter'] = $filter;

  drupal_add_js(drupal_get_path('module', 'l10n_community') .'/l10n_community.js');
  return drupal_get_form('l10n_community_translate_form', $langcode, $project, $filter);
}

/**
 * Translation web interface.
 *
 * @param $langcode
 *   Language code, for example 'hu', 'pt-br', 'de', 'it'.
 * @param $project
 *   Codename of the project.
 * @param $filter
 *   The filter used. See L10N_STATUS_ALL, L10N_STATUS_UNTRANSLATED,
 *   L10N_STATUS_SUGGESTED and L10N_STATUS_TRANSLATED.
 */
function l10n_community_translate_form($langcode = NULL, $project = NULL, $filter = NULL) {
  global $user;

  $form = $js_strings = array();
  $count = $current_sid = 0;
  $strings = l10n_server_get_strings($langcode, $filter, NULL, $project, NULL, 10);
  
  if (!count($strings)) {
    drupal_set_message(t('No strings found with this filter.'));
    return;
  }
  
  $form['#tree'] = TRUE;
  $form['pager'] = array(
    '#value' => theme('pager', NULL, 10, 0)
  );
  $form['langcode'] = array(
    '#type' => 'value',
    '#value' => $langcode
  );
  $form['project'] = array(
    '#type' => 'value',
    '#value' => $project
  );

  foreach ($strings as $string) {
    if (isset($string->sid) and $current_sid != $string->sid) {
      $count++;
      $internal = 0;
      $current_sid = $string->sid;
      
      $form[$count] = array(
        '#type' => 'fieldset',
      );
      $form[$count]['sid'] = array(
        '#type' => 'value',
        '#value' => $string->sid
      );
      
      $js_strings[] = array($count, $string->source);
      
      $form[$count]['source'] = array(
        '#type' => 'item',
        '#title' => t('Original string') . theme('l10n_community_copy_button', count($js_strings)),
        '#value' => l10n_community_format_text(check_plain($string->source)),
        '#attributes' => array('class' => 'l10n-community-source'),
      );
      $form[$count]['plural'] = array(
        '#type' => 'value',
        '#value' => $string->plural
      );
      
      if (!empty($string->translated)) {
        $js_strings[] = array($count, $string->translated);

        if (empty($string->official)) {
          $form[$count]['suggestion'][1] = array(
            '#type' => 'item',
            '#title' => t('Suggestion') . theme('l10n_community_copy_button', count($js_strings)),
            '#value' => l10n_community_format_text(check_plain($string->translated)),
            '#description' => t('Posted by !user on !date.', array('!user' => $string->uid, '!date' => format_date($string->update_date, 'small', 'Y-m-d H:i O'))),
            '#attributes' => array('class' => 'l10n-community-suggestion')
          );
        }
        else {
          $form[$count]['current'] = array(
            '#type' => 'item',
            '#title' => t('Current translation') . theme('l10n_community_copy_button', count($js_strings)),
            '#value' => l10n_community_format_text(check_plain($string->translated)),
            '#description' => t('Posted by !user on !date.', array('!user' => $string->uid, '!date' => format_date($string->update_date, 'small', 'Y-m-d H:i O')))
          );
        }
      }
      
      if (l10n_community_get_permission($langcode) != L10N_PERM_NONE) {
        $form[$count]['new_suggestion'] = array(
          '#type' => 'textarea',
          '#title' => t('New Suggestion'),
          '#default_value' => '',
          '#rows' => 1,
          '#id' => 'new_suggestion'. $count
        );
      }
    }
    
    else {
      $internal++;
      if (!empty($string->translated)) {
        $js_strings[] = array($count, $string->translated);
        $form[$count]["suggestion"][$internal] = array(
          '#type' => 'item',
          '#title' => t("Suggestion") . theme('l10n_community_copy_button', count($js_strings)),
          '#value' => l10n_community_format_text(check_plain($string->translated)),
          '#description' => t('Posted by !user on !date.', array('!user' => $string->uid, '!date' => format_date($string->update_date, 'small', 'Y-m-d H:i O'))),
          '#attributes' => array('class' => 'l10n-community-suggestion')
        );
      }
    }
  }
  drupal_add_js(array('l10n_strings' => $js_strings), 'setting');
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save translations')
  );
  return $form;
}

/**
 * Format translatable strings with custom icons for greater
 * visibility of some items. Newlines and replacement strings
 * are made more visible.
 *
 * @param $string
 *   Source strings to translate.
 */
function l10n_community_format_text($string) {
  $path = base_path() . drupal_get_path('module', 'l10n_community');
  $string = str_replace(array("\n", "\\\\n"), '<img src="'. $path .'/img/si_newline.png" alt="newline" /><br />', $string);
  $string = preg_replace('~((%|!|@)[0-9a-zA-Z_-]+)~', '<em class="l10n-community-marker">\\1</em>', $string);
  return $string;
}

/**
 * Save translations entered in the web form.
 */
function l10n_community_translate_form_submit($form_id, &$form) {
  global $user;
  
  $perm = l10n_community_get_permission($form['langcode']);
  if ($perm != L10n_PERM_NONE) {
    $sql = $sql_args = array();
    foreach ($form as $item => $value) {
      if (is_array($form[$item]) and !empty($form[$item]['new_suggestion'])) {
        l10n_community_target_save(
          $form[$item]['sid'],
          $form[$item]['new_suggestion'],
          $form['langcode'],
          $user->uid,
          time(),
          $perm,
          $form[$item]['plural']
        );
      }
    }
  }
}

/**
 * Implemenation of hook_form_alter().
 */
function l10n_community_form_alter($form_id, &$form) {
  // all languages have a translation team, you can create another one
  if ($form_id == "l10n_team_node_form" && empty($form["locale_team"]["#value"]) && empty($form["locale_team"]["#options"])) {
    drupal_set_message(t("There is no language that doesn't have a team. You cannot create another team."), "error");
    $form["submit"]["#disabled"] = TRUE; // disable the submit button
  }
}

/**
 * User interface for the translation import screen.
 */
function l10n_community_import_form($project) {
  require_once(drupal_get_path("module", "l10n_server") ."/localeplus.inc");
  $form = _locale_admin_import();
  $form["import"]["saver"] = array(
    "#type"         => "hidden",
    "#value"        => "l10n_community_import_saver"
  );
  $form["import"]["project"] = array(
    "#description"  => t("This translates which project?"),
    "#options"      => $project,
    "#title"        => t("Project"),
    "#type"         => "select",
    "#weight"       => -1
  );
  return $form;
}

/**
 * Process the locale import form submission.
 */
function l10n_community_import_form_submit($form_id, &$form) {
  global $_l10n_community_project;
  $_l10n_community_project = $form["project"];
  require_once drupal_get_path("module", "l10n_server") ."/localeplus.inc";
  return _localeplus_admin_import_submit($form_id, $form);
}

/**
 * Imports a string into the database
 *
 * @param $op
 *   Operation to perform: "db-store", "db-report", "mem-store" or "mem-report"
 * @param $value
 *   Details of the string stored
 * @param $mode
 *   Should existing translations be replaced ("overwrite" or "keep")
 * @param $lang
 *   Language to store the string in
 * @see _locale_import_one_string
 */
function l10n_community_import_saver($op, $value = NULL, $lang = NULL, $mode = NULL) {
  static $additions = 0;
  static $updates = 0;
  static $headerdone = FALSE;
  static $strings = array();
  switch ($op) {
    case "mem-report":              // Return stored strings
      return $strings;
    case "mem-store":               // Store string in memory (only supports single strings)
      $strings[$value["msgid"]] = $value["msgstr"];
      return;
    case "db-report":               // Called at end of import to inform the user
      return array($headerdone, $additions, $updates);
    case "db-store":                // Store the string we got in the database
      if ($value["msgid"] == "") {  // We got header information
        $headerdone = TRUE;
        return;
      }
      $comments     = _locale_import_shorten_comments($value["#"]);
      global $user, $_l10n_community_project;
      $official     = l10n_community_get_permission($lang, $user);
      $string       = explode("\0", $value["msgid"], 2);
      $translations = (is_array($value["msgstr"])) ? $value["msgstr"] : array($value["msgstr"]);
      while (list($str) = each($string)) {
        if ($sid = db_result(db_query("SELECT sid FROM {l10n_server_source} WHERE source = '%s' AND project= '%s' AND ptid = %d;",
            $string[$str], $_l10n_community_project, $str))) {
          $strings = l10n_community_target_save($sid, $translations[$str], $lang, $user->uid, time(), $official, $str);
        }
      }
      return $strings;
  }
}

/**
 * Save translated strings into database
 *
 * @param $sid
 *   Number, the original string ID
 * @param $translated
 *   String, the translated string
 * @param $locale
 *   String, the language code, ie "en", "pt-br", "de"
 * @param $uid
 *   Number, user ID
 * @param $update_date
 *   Number, the current time
 * @param $official
 *   Number, 1 if the user is permited to suggest and 2 if the user
 *   is a language translation team maintainer
 * @param $plural
 *   Numbe, if the current string is a plural form
 */
function l10n_community_target_save($sid, $translated, $locale, $uid, $update_date, $official, $plural) {
  if (db_result(db_query("SELECT sid FROM {l10n_server_target}
      WHERE sid = %d AND locale = '%s' AND uid = %d;", $sid, $locale, $uid))) {
    if ($official == 2) {
      db_query("UPDATE {l10n_server_target} SET official = 0
        WHERE sid = %d AND locale = '%s' AND official = 1;", $sid, $locale);
    }
    db_query("UPDATE {l10n_server_target} SET translated = '%s', update_date = %d, official = %d
      WHERE sid = %d AND locale = '%s' AND uid = %d;",
      $translated, time(), $official - 1, $sid, $locale, $uid);
    return array(0, 1);
  }
  $sql_args = array();
  array_push($sql_args,
    $sid,
    $translated,
    $locale,
    $uid,
    $official - 1, // permission = 1 to suggest, permission = 2 to translate
    time());
    db_query("INSERT INTO {l10n_server_target} (sid, translated, locale, uid, official, update_date)
      VALUES (%d, '%s', '%s', %d, %d, %d)", $sql_args);
  return array(1, 0);
}

// = Theme functions ===========================================================

/**
 * Progress bar display for translation status information.
 */
function theme_l10n_progress_columns($sum, $translated, $suggested) {
  // Compute numbers, percentages and provide alternate text titles.
  $status = array(
    'translated' => array((int) $translated, round($translated / $sum * 100, 2), t('!percent translated')),
    'suggested' => array((int) $suggested,  round($suggested / $sum * 100, 2),  t('!percent suggested')),
    'untranslated' => array($sum - $translated - $suggested, 0, t('!percent untranslated')),
  );
  $status['untranslated'][1] = 100 - $status['suggested'][1] - $status['translated'][1];
  
  // Visual summary with a progress bar.
  $bar = '<div class="l10n-community-progress">';
  foreach ($status as $key => $values) {
    if ($values[1] > 0) {
      $bar .= '<div class="l10n-community-progress-'. $key . '" style="width:'. $values[1] .'%;" title="'. strtr($values[2], array('!percent' => $values[1] .'%')) .'"></div>';
    }
  }
  $bar .= '</div>';
  
  return array($bar, $status['translated'][0] .' ('. $status['translated'][1] .'%)', $status['suggested'][0], $status['untranslated'][0]);
}

// = Utility functions =========================================================

/**
 * Helper function for language listing.
 */
function l10n_community_languages() {
  if ($languages = locale_supported_languages(FALSE, TRUE)) {
    // English is not a target language for us.
    unset($languages['name']['en']);
    return $languages['name'];
  }
  return array();
}

/**
 * Status constants to URL parts mapping
 */
function l10n_community_status_indicators($flip = FALSE) {
  $mapping = array(
    L10N_STATUS_ALL => 'all',
    L10N_STATUS_TRANSLATED => 'translated',
    L10N_STATUS_UNTRANSLATED => 'untranslated',
    L10N_STATUS_SUGGESTED => 'suggested',
  );
  return ($flip ? array_flip($mapping) : $mapping);
}

/**
 * Get translation permission level for a specific user.
 *
 * @param $langcode
 *   Language code, for example 'hu', 'pt-br', 'de', 'it'.
 * @param $account
 *   Option user account.
 * @return
 *   number, 0 = not allowed, 1 = allowed to suggest, 2 = allowed to translate
 */
function l10n_community_get_permission($langcode, $account = NULL) {
  static $permissions = array();
  global $user;
  
  if (empty($langcode)) {
    return L10N_PERM_NONE;
  }
  if (!isset($account)) {
    $account = $user;
  }
  
  if (isset($permissions[$account->uid][$langcode])) {
    // Return cached value if available.
    return $permissions[$account->uid][$langcode];
  }
  
  $perm = L10N_PERM_NONE; 
  
  if ($account->uid == 1) {
    // The administrator has all permissions in all groups.
    $perm = L10N_PERM_ALL;
  }
  
  if ($team_nid = db_result(db_query("SELECT nid FROM {l10n_server_team} WHERE locale = '%s';", $langcode))) {
    if (!empty($account->og_groups) and !empty($account->og_groups[$team_id])) {
      if (!empty($account->og_groups[$team_nid]['is_admin'])) {
        // Administrators of groups have all permissions in the group.
        $perm = L10N_PERM_ALL; 
      }
      else if ($account->og_groups[$team_nid]['is_active']) {
        // Members in the group have permission to suggest.
        $perm = L10N_PERM_SUGGEST;
      }
    }
  }
  
  // Record result in local cache.
  return ($permissions[$account->uid][$langcode] = $perm);
}

/**
 * Copy button for string values.
 */
function theme_l10n_community_copy_button($count = 0) {
  $title = t('Copy value to edit field.');
  return ' <img src="'. base_path() . drupal_get_path('module', 'l10n_community') .'/img/edit-copy.png" alt="'. $title .'" title="'. $title .'" id="l10n-community-copy-'. ($count - 1) .'" />';
}
