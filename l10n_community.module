<?php
// $Id: l10n_community.module,v 1.1.2.6 2007-08-10 14:04:01 goba Exp $

/**
 * @file
 *   A community web interface for Drupal project translation.
 *
 *   Build on organic groups to provide a convinient web interface
 *   for translators to collaborate on Drupal project translations.
 */

/**
 * Regular users have no permission to approve or suggest translations
 */
define('L10N_PERM_NONE', 0);

/**
 * Translation group members have permission to suggest.
 */
define('L10N_PERM_SUGGEST', 1);

/**
 * User #1 and group administrators have permission to approve and
 * add translations without approval.
 */
define('L10N_PERM_ALL', 2);

// = Core hooks ================================================================

/**
 * Implementation of hook_help().
 */
function l10n_community_help($section) {
  global $user;
  
  switch ($section) {
    case 'translate':
    case 'translate/languages':
      return '<p>'. t('You need to choose a language, and then either go to the project list or the group page. There is also a by-project listing available, which allows you to dig into languages from the project angle.') .'</p>';
    case 'translate/projects':
      return '<p>'. t('You need to choose a project, and then either export translation templates, or go to the language list to pick a language to translate to. There is also a by-language listing available, which allows you to dig into projects from the language angle.') .'</p>';
  }
  if (preg_match('!translate/languages/([^/]+)($|/([^/]+))!', $section, $args)) {
    list ($langcode, /*drop*/, $project) = $args;
    $perm = l10n_community_get_permission($langcode);
    $languages = l10n_community_languages('name');
    $groups = l10n_community_groups();
    switch ($perm) {
      // Inform user about her permission level in this group.
      case L10N_PERM_NONE:
        $permtext = t('You are not a member of this translation group, but you can still view the existing translations and export templates or translations for your own use.') .' '. ($user->uid ? t('<a href="@group">Subscribe to this group</a> if you would like to help out.', array('@group' => url('node/'. $groups[$args[1]]))) : t('<a href="@register">Create an account or log in</a> and <a href="@group">subscribe to this group</a> if you would like to help out.', array('@register' => url('user'), '@group' => url('node/'. $groups[$args[1]]))));
        break;
      case L10N_PERM_SUGGEST:
        $permtext = t('You are a member of this translation group, so you can suggest translations and import complete Gettext translation files to suggest more strings at once. Administrators of this group will either accept or decline suggestions provided by members of the group. Feel free to export translation templates, or the current state of the translation if you are more comfortable working offline.');
        break;
      case L10N_PERM_ALL:
        $permtext = t('As an administrator of this translation group, you can approve translations suggested by members of the group, as well as export/import Gettext translation files.');
        break;
    }
    if ($project == '') {
      // Only language code => project list if shown.
      $output = '<p>'. t('This page shows a list of all projects and their overall translation status in this language (accumulated for all releases). The <a href="@group">%language group</a> might provide you with more information, translation suggestions and guidelines.', array('@group' => url('node/'. $groups[$args[1]]), '%language' => $languages[$args[1]])) .' '. $permtext .'</p>';
      return $output;
    }
    else {
      // Language code and project.
      return '<p>'. $permtext .'</p>';
    }
  }
}

/**
 * Implementation of hook_menu().
 *
 * @todo All menu items are accessible to everyone, rethink this.
 */
function l10n_community_menu($may_cache) {
  $items = array();
  if (!$may_cache) {
    drupal_add_css(drupal_get_path('module', 'l10n_community') .'/l10n_community.css', 'module');
    drupal_add_css(drupal_get_path('module', 'system') .'/admin.css', 'module');

    $items[] = array(
      'title' => t('Home'),
      'path' => 'l10nhome',
      'callback' => 'l10n_community_home',
      'access' => TRUE,
      'type' => MENU_CALLBACK,
    );

    $items[] = array(
      'title' => t('Translate'),
      'path' => 'translate',
      'callback' => 'l10n_community_overview_languages',
      'access' => TRUE,
    );
    $items[] = array(
      'title' => t('By language'),
      'description' => t('Overview of languages and their translation status.'),
      'path' => 'translate/languages',
      'access' => TRUE,
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    );
    $items[] = array(
      'title' => t('By project'),
      'description' => t('Overview of projects and their translation status.'),
      'path' => 'translate/projects',
      'callback' => 'l10n_community_overview_projects',
      'access' => TRUE,
      'type' => MENU_LOCAL_TASK,
      'weight' => -5,
    );

    if (arg(0) == 'translate') {
      // Menu items for languages if under 'translations'.
      foreach (l10n_community_languages('name') as $langcode => $name) {
        $items[] = array(
          'title' => $name,
          'description' => t('Projects and their translation status.'),
          'path' => 'translate/languages/' . $langcode,
          'callback' => 'l10n_community_status_projects',
          'callback arguments' => array($langcode),
          'access' => TRUE,
          'type' => MENU_CALLBACK,
        );
      }
      if (arg(1) == 'languages' && $langcode = arg(2)) {
        // Menu items for projects if under one specific language.
        foreach (l10n_server_get_projects() as $uri => $project) {
          $items[] = array(
            'title' => t('Translate'),
            'path' => 'translate/languages/' . $langcode .'/'. $uri,
            'callback' => 'l10n_community_translate_page',
            'callback arguments' => array($langcode, $uri),
            'access' => TRUE,
            'type' => MENU_CALLBACK,
          );
        }
        if ($uri = arg(3)) {
          // Menu items to translate, import and export projects.
          $items[] = array(
            'title' => t('Translate'),
            'path' => 'translate/languages/' . $langcode .'/'. $uri .'/translate',
            'type' => MENU_DEFAULT_LOCAL_TASK,
            'weight' => -10,
          );
          $items[] = array(
            'title' => t('Import'),
            'path' => 'translate/languages/' . $langcode .'/'. $uri .'/import',
            'type' => MENU_LOCAL_TASK,
            'weight' => -5,
          );
          $items[] = array(
            'title' => t('Export'),
            'path' => 'translate/languages/' . $langcode .'/'. $uri .'/export',
            'type' => MENU_LOCAL_TASK,
            'weight' => 0,
          );
        }
      }
    }
  }
  return $items;
}

/**
 * Implementation of hook_block().
 */
function l10n_community_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks = array(
        0 => array(
          'info' => t('Translation help'),
          'weight' => 0,
          'enabled' => 1,
          'region' => 'left'
        )
      );
      return $blocks;
    
    case 'view':
      if (preg_match('!translate/languages/([^/]*)/([^/]*)!', $_GET['q'], $founds)) {
        // Only show block if we have valuable and relevant information.
        list (, $langcode, $project) = $founds;
        $languages = l10n_community_languages();
        $items = array();
        $items[] = t('!newline_image represents a line break. Remember to include a line break in the same position in the translation, even if it is at the beginning or end!', array('!newline_image' => ' <img src="'. base_path() . drupal_get_path('module', 'l10n_community') .'/img/si_newline.png" alt="'. t('Newline marker.') . '" /> '));
        $items[] = t('Variables are designated with !, @ and % (like %example, !example or @example), and should be kept in the text as-is.');
        $formula = join(' ', preg_split('!(&&|\\|\\||%|<=|>=|==|\\!=|\\?|:)!', $languages[$langcode]->formula, -1, PREG_SPLIT_DELIM_CAPTURE));
        $items[] = t('The plural formula in use with this language is %formula.', array('%formula' => str_replace('$n', 'n', $formula)));
        return array(
          'subject' => t('Translation help'),
          'content' => theme('item_list', $items),
        );
      }
  }
}

// = Organic group node type ===================================================

/**
 * Implementation of hook_node_info().
 */
function l10n_community_node_info() {
  return array(
    'l10n_group' => array(
      'name' => t('Translation group'),
      'module' => 'l10n_community',
      'description' => t('A language community around Drupal project translations.'),
    )
  );
}

/**
 * Implementation of hook_insert().
 */
function l10n_community_insert(&$node) {
  db_query("INSERT INTO {l10n_community_group} (nid, language) VALUES (%d, '%s')", $node->nid, $node->l10n_community_language);
}

/**
 * Implementation of hook_delete().
 */
function l10n_community_delete(&$node) {
  db_query('DELETE FROM {l10n_community_group} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_update().
 */
function l10n_community_update($node) {
  if ($nid = db_result(db_query('SELECT nid FROM {l10n_community_group} WHERE nid = %d', $node->nid))) {
    db_query("UPDATE {l10n_community_group} SET language = '%s' WHERE nid = %d", $node->l10n_community_language, $node->nid);
  }
  else {
    l10n_community_insert($node);
  }
}

/**
 * Implemenation of hook_load().
 */
function l10n_community_load(&$node) {
  return db_fetch_object(db_query('SELECT language AS l10n_community_language FROM {l10n_community_group} WHERE nid = %d', $node->nid));
}

/**
 * Implementation of hook_access().
 */
function l10n_community_access($op, $node) {
  if ($op == 'view') { 
    // Users can always see the translation group page.
    return TRUE;
  }
  if (user_access('administer localization server')) { 
    // But only few can delete/edit.
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_form().
 */
function l10n_community_form(&$node) {
  $form = array();
  // Create a list of languages on the site having no translation group.
  $groups = db_query('SELECT language FROM {l10n_community_group}');
  $languages = l10n_community_languages('name');
  while ($group = db_fetch_object($groups)) {
    if ($languages[$group->language]) {
      unset($languages[$group->language]);
    }
  }
  
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Group name'),
    '#description' => t('Name of the translation group.'),
    '#default_value' => isset($node->title) ? $node->title : '',
    '#weight' => -5,
    '#required' => TRUE
  );
  if (!empty($node->l10n_community_language)) {
    // Already attached to a language, not possible to modify.
    $form['l10n_community_language'] = array(
      '#type' => 'item',
      '#title' => t('Language'),
      '#description' => t('The language managed by this group.'),
      '#value' => $node->l10n_community_language,
      '#weight' => -5
    );
  }
  else {
    // Not yet attached to a language.
    $form['l10n_community_language'] = array(
      '#type' => 'select',
      '#title' => t('Language'),
      '#description' => t('The language managed by this group.'),
      '#options' => $languages,
      '#weight' => -5,
      '#required' => TRUE
    );
  }
  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Welcome message'),
    '#description' => t('Welcome message to display on the group homepage.'),
    '#default_value' => isset($node->body) ? $node->body : '',
    '#rows' => 5,
  );
  $form['format'] = isset($node->format) ? filter_form($node->format) : filter_form();
  return $form;
}

// = Status pages ==============================================================

function l10n_community_home() {
  drupal_set_title(t('Welcome to the Drupal localization server'));
  include_once 'l10n_community_home.inc';
  return $output;
}

/**
 * Translation status overview for all languages.
 */
function l10n_community_overview_languages() {
  if (!$languages = l10n_community_languages('name')) {
    drupal_set_message(t('No languages to list.'), 'error');
    return '';
  }

  if (!$num_source = l10n_server_get_strings(array('count' => TRUE))) {
    drupal_set_message(t('No strings to translate.'), 'error');
    return '';
  }
  
  $groups = l10n_community_groups();
  $table = array();
  foreach ($languages as $langcode => $language) {
    $num_suggested = rand(1, $num_source/3); //l10n_server_get_strings($langcode, L10N_STATUS_SUGGESTED, TRUE);
    $num_translated = rand(1, $num_source/2); //l10n_server_get_strings($langcode, L10N_STATUS_TRANSLATED, TRUE);
    $group = isset($groups[$langcode]) ? l(t('Group'), 'node/'. $groups[$langcode]->nid, array('title' => t('To the group homepage.'))) : t('n/a');
    $table[] = array_merge(
      array(
        array('data' => "<strong>$language</strong> ($langcode)", 'class' => 'language'),
        l(t('Projects'), 'translate/languages/'. $langcode, array('title' => t('To the project list.'))),
        $group
      ),
      theme('l10n_progress_columns', $num_source, $num_translated, $num_suggested)
    );
  }
  return theme(
    'table',
    array(
      array('data' => t('Language'), 'class' => 'language'),
      t('Projects'),
      t('Group'),
      t('Overall status'),
      t('Translated'),
      t('Suggested'),
      t('Untranslated')
    ),
    $table,
    array('id' => 'l10n-community-overview')
  );
}

/**
 * Translation status overview for all projects.
 */
function l10n_community_overview_projects() {
  $output = '';
  if ($projects = l10n_server_get_projects(NULL, 10)) {
    $output = theme("pager", NULL, 10, 0);
    $table = array();
    foreach ($projects as $uri => $project) {
      $num_source = l10n_server_get_strings(array('count' => TRUE, 'project_uri' => $uri));
      if (!empty($num_source)) {
        $num_suggested = rand(1, $num_source/3); //l10n_server_get_strings($langcode, L10N_STATUS_SUGGESTED, TRUE, $uri);
        $num_translated = rand(1, $num_source/2); //l10n_server_get_strings($langcode, L10N_STATUS_TRANSLATED, TRUE, $uri);
        $table[] = array_merge(array(l($project->title, 'translate/projects/'. $uri), l(t('Export'), 'translate/projects/'. $uri . '/export')), theme('l10n_progress_columns', $num_source, $num_translated, $num_suggested));
      }
    }
    $output .= theme('table', array(t('Project'), t('Export template'), t('Overall status'), t('Translated'), t('Suggested'), t('Untranslated')), $table);
    $output .= theme("pager", NULL, 10, 0);
  }
  else {
    drupal_set_message(t('No projects found.'));
  }
  return $output;
}

/**
 * Translation status page of all projects from a given language.
 *
 * @param $langcode
 *   Language code, for example 'hu', 'pt-br', 'de', 'it'.
 */
function l10n_community_status_projects($langcode = NULL) {
  if (!isset($langcode)) {
    drupal_set_message(t('No language selected.'), 'error');
    return '';
  }
  
  drupal_set_title(t('@language projects overview', array('@language' => drupal_get_title())));
  
  if ($projects = l10n_server_get_projects(NULL, 10)) {
    $output = theme("pager", NULL, 10, 0);
    $table = array();
    foreach ($projects as $uri => $project) {
      $num_source = l10n_server_get_strings(array('count' => TRUE, 'project_uri' => $uri));
      if (!empty($num_source)) {
        $num_suggested = rand(1, $num_source/3); //l10n_server_get_strings($langcode, L10N_STATUS_SUGGESTED, TRUE, $uri);
        $num_translated = rand(1, $num_source/2); //l10n_server_get_strings($langcode, L10N_STATUS_TRANSLATED, TRUE, $uri);
        $table[] = array_merge(array(l($project->title, 'translate/languages/'. $langcode .'/' . $uri), l(t('Export'), 'translate/projects/'. $uri . '/export')), theme('l10n_progress_columns', $num_source, $num_translated, $num_suggested));
      }
    }
    $output .= theme('table', array(t('Project'), t('Export template'), t('Overall status'), t('Translated'), t('Suggested'), t('Untranslated')), $table);
    $output .= theme("pager", NULL, 10, 0);
  }
  return $output;
}

// = Translation web interface =================================================

function l10n_community_translate_page($langcode = NULL, $uri = NULL) {
  
  // Provide accurate page title, depending on permission. At this point, the
  // user already selected a language, and the project is the most important
  // information, so we only format that as a placeholder.
  $project = l10n_server_get_projects($uri);
  $languages = l10n_community_languages();
  $perm = l10n_community_get_permission($langcode);
  if ($perm == L10N_PERM_NONE) {
    drupal_set_title(t('@language %project translations', array('%project' => $project->title, '@language' => $languages[$langcode]->name)));
  }
  else {
    drupal_set_title(t('Translate %project to @language', array('%project' => $project->title, '@language' => $languages[$langcode]->name)));
  }

  drupal_add_js(drupal_get_path('module', 'l10n_community') .'/l10n_community.js');

  // Build values for the form generation.
  list ($status, $release, $search) = l10n_community_filter_build();
  $output = drupal_get_form('l10n_community_filter_form', $uri, $status, $release, $search);
  // Retrieve values stored from the form changes.
  list ($status, $release, $search) = l10n_community_filter_build();
  
  $strings = l10n_server_get_strings(array('langcode' => $languages[$langcode]->locale, 'project_uri' => $uri, 'pager' => 10, 'search' => $search));
  if (!count($strings)) {
    drupal_set_message(t('No strings found with this filter.'));
  }
  elseif ($perm != L10N_PERM_NONE) {
    $output .= drupal_get_form('l10n_community_translate_form', $strings, $languages[$langcode], $uri, $perm);
  }
  else {
    $output .= drupal_get_form('l10n_community_translate_view', $strings, $languages[$langcode], $uri);
  }
  return $output;
}

/**
 * Translate form filter.
 */
function l10n_community_filter_form($uri, $status = L10N_STATUS_ALL, $release = 'all', $search  = '') {
  $status_options = array(
    L10N_STATUS_ALL => t('All'),
    L10N_STATUS_UNTRANSLATED => t('Untranslated'),
    L10N_STATUS_SUGGESTED => t('Suggested'),
    L10N_STATUS_TRANSLATED => t('Translated'),
  );
  $form['filters'] = array(
    '#title' => t('Display settings'),
    '#type' => 'fieldset',
    '#prefix' => '<div id="l10n-community-filter" class="container-inline">',
    '#suffix' => '</div>',
  );
  $form['filters']['status'] = array(
    '#title' => t('Status'),
    '#type' => 'select',
    '#options' => $status_options,
    '#default_value' => $status,
  );
  $releases = l10n_server_get_releases($uri);
  $release_options = array('all' => t('All'));
  foreach ($releases as $this_release) {
    $release_options[$this_release->rid] = $this_release->title;
  }
  $form['filters']['release'] = array(
    '#title' => t('Release'),
    '#type' => 'select',
    '#options' => $release_options,
    '#default_value' => $release,
  );
  $form['filters']['search'] = array(
    '#title' => t('Search'),
    '#type' => 'textfield',
    '#default_value' => $search,
  );
  $form['filters']['submit'] = array(
    '#value' => t('Filter'),
    '#type' => 'submit',
  );
  return $form;
}

/**
 * Submission handler for filtering form.
 */
function l10n_community_filter_form_submit($form_id, &$form) {
  // Remember filters for later use, so translators don't need to
  // reenter them, pagers keep their value and so on. Note: these will
  // be 'personal', ie. not included in website links.
  $_SESSION['l10n_community_filter'] = array(
    'status'  => intval($form['status']),
    'release' => is_numeric($form['release']) ? $form['release'] : 'all',
    'search'  => $form['search'],
  );
}

/**
 * Builds a list of 'status', 'release' and 'search' values, as remembered from the request.
 */
function l10n_community_filter_build() {
  return array(
    isset($_SESSION['l10n_community_filter']['status']) ? intval($_SESSION['l10n_community_filter']['status']) : L10N_STATUS_ALL,
    isset($_SESSION['l10n_community_filter']['release']) ? $_SESSION['l10n_community_filter']['release'] : 'all',
    isset($_SESSION['l10n_community_filter']['search']) ? $_SESSION['l10n_community_filter']['search'] : '',
  );
}

/**
 * Translation web interface.
 *
 * @param $strings
 *   Array of strings to display.
 * @param $language
 *   Language object.
 * @param $uri
 *   Project URI.
 * @param $perm
 *   Community permission level of user watching the page.
 */
function l10n_community_translate_form($strings = array(), $language = NULL, $uri = NULL, $perm = L10N_PERM_SUGGEST) {
  $form = $js_strings = array();
  
  $form['#tree'] = TRUE;
  $form['pager'] = array(
    '#value' => theme('pager', NULL, 10, 0)
  );
  $form['langcode'] = array(
    '#type' => 'value',
    '#value' => $language->locale
  );
  $form['project'] = array(
    '#type' => 'value',
    '#value' => $uri
  );

  foreach ($strings as $id => $string) {
    $form[$id] = array(
      '#type' => 'fieldset',
      //'#description' => $string->plural ? t('This string should have different plural versions based on the formula for this language.') : '',
    );
    $form[$id]['sid'] = array(
      '#type' => 'value',
      '#value' => $string->sid
    );


    if ($string->plural) {
      // Multiple source strings if we deal with plurals.
      $parts = explode(chr(0), $string->value);
      $string_parts = array();
      foreach ($parts as $i => $part) {
        $js_strings[$id .'-'. $i] = $part;
        $string_parts[] = theme('l10n_community_copy_button', $id .'-'. $i) .' '. l10n_community_format_text(check_plain($part));
      }
      $source = theme('item_list', $string_parts);
    }
    else {
      // Single source string otherwise.
      $source = theme('l10n_community_copy_button', $id) .' '. l10n_community_format_text(check_plain($string->value));
      $js_strings[$id] = $string->value;
    }

    $form[$id]['source'] = array(
      '#type' => 'markup',
      '#value' => $source,
    );

    if ($string->plural) {
      $translations = (!empty($string->translation) ? explode("\0", $string->translation) : array_fill(0, $language->plurals, ''));
      for($i = 0; $i < $language->plurals; $i++) {
        $form[$id]['translation'][$i] = array(
          '#type' => 'textarea',
          '#title' => t('Translation for variant #%d', array('%d' => $i)),
          '#default_value' => $translations[$i],
          '#rows' => 1,
          '#id' => 'l10n-commumnity-translation-'. $id .'-'. $i
        );
      }
    }
    else {
      $form[$id]['translation'] = array(
        '#type' => 'textarea',
        '#title' => t('Translation'),
        '#default_value' => !empty($string->translation) ? $string->translation : '',
        '#rows' => 1,
        '#id' => 'l10n-commumnity-translation-'. $id
      );
    }
  }
  
  drupal_add_js(array('l10n_strings' => $js_strings), 'setting');
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save translations')
  );
  return $form;
}

/**
 * Form for translation *viewing* (for those without privileges).
 */
function l10n_community_translate_view($strings = array(), $language = NULL, $uri = NULL) {
  $form['#tree'] = TRUE;
  $form['pager'] = array(
    '#value' => theme('pager', NULL, 10, 0)
  );
  foreach ($strings as $id => $string) {
    $form[$id] = array(
      '#type' => 'fieldset',
      //'#description' => $string->plural ? t('This string should have different plural versions based on the formula for this language.') : '',
    );
    if ($string->plural) {
      // Multiple source strings if we deal with plurals.
      $source = theme('item_list', array_map('l10n_community_format_text', array_map('check_plain', explode(chr(0), $string->value))));
    }
    else {
      // Single source string otherwise.
      $source = l10n_community_format_text(check_plain($string->value));
    }
    $form[$id]['source'] = array(
      '#type' => 'markup',
      '#value' => $source,
    );
    if (!empty($string->translation)) {
      if ($string->plural) {
        $translations = explode("\0", $string->translation);
        for($i = 0; $i < $language->plurals; $i++) {
          $form[$id]['translation'][$i] = array(
            '#type' => 'markup',
            '#value' => '<br />'. $translations[$i],
          );
        }
      }
      else {
        $form[$id]['translation'] = array(
          '#type' => 'markup',
          '#value' => !empty($string->translation) ? '<br />'. $string->translation : '',
        );
      }
    }
  }
  return $form;
}

/**
 * Format translatable strings with custom icons for greater
 * visibility of some items. Newlines and replacement strings
 * are made more visible.
 *
 * @param $string
 *   Source strings to translate.
 */
function l10n_community_format_text($string) {
  $path = base_path() . drupal_get_path('module', 'l10n_community');
  $string = str_replace(array("\n", "\\\\n"), '<img src="'. $path .'/img/si_newline.png" alt="newline" /><br />', $string);
  $string = preg_replace('~((%|!|@)[0-9a-zA-Z_-]+)~', '<em class="l10n-community-marker">\\1</em>', $string);
  return $string;
}

/**
 * Save translations entered in the web form.
 */
function l10n_community_translate_form_submit($form_id, &$form) {
  global $user;

  $text = '';
  $tried_to_save = FALSE;
  foreach ($form as $item => $value) {
    if (!is_array($form[$item]) || !isset($form[$item]['translation'])) {
      // Skip, if we don't have translations in this form item.
      continue;
    }
    
    $text = '';
    if (is_string($form[$item]['translation'])) {
      // Single string representation: simple translation.
      $text = $form[$item]['translation'];
    }
    if (is_array($form[$item]['translation'])) {
      // Array -> plural variants are provided. Join them with a NULL separator.
      $text = join("\0", $form[$item]['translation']);
      if (trim($text) == '') {
        // If the whole string only contains NULL bytes, empty the string, so
        // we don't save an empty translation. Otherwise the NULL bytes need
        // to be there, so we know plural variant indices.
        $text = '';
      }
    }
      
    if ($text) {
      // If we have any string to save.
      l10n_community_target_save($form[$item]['sid'], $text, $form['langcode'], $user->uid);
    }
  }
}

/**
 * Implemenation of hook_form_alter().
 */
function l10n_community_form_alter($form_id, &$form) {
  // All languages have a single translation group, you cannot create more.
  if ($form_id == 'l10n_group_node_form' && empty($form['l10n_community_language']['#value']) && empty($form['l10n_community_language']['#options'])) {
    drupal_set_message(t("All available languages have groups now. You cannot create another group."), 'error');
    $form['submit']['#disabled'] = TRUE;
  }
}

/**
 * User interface for the translation import screen.
 */
function l10n_community_import_form($uri) {
  require_once(drupal_get_path("module", "l10n_server") ."/localeplus.inc");
  $form = _locale_admin_import();
  $form["import"]["saver"] = array(
    "#type"         => "hidden",
    "#value"        => "l10n_community_import_saver"
  );
  $form["import"]["project"] = array(
    "#description"  => t("This translates which project?"),
    "#options"      => $uri,
    "#title"        => t("Project"),
    "#type"         => "select",
    "#weight"       => -1
  );
  return $form;
}

/**
 * Process the locale import form submission.
 */
function l10n_community_import_form_submit($form_id, &$form) {
  global $_l10n_community_project;
  $_l10n_community_project = $form["project"];
  require_once drupal_get_path("module", "l10n_server") ."/localeplus.inc";
  return _localeplus_admin_import_submit($form_id, $form);
}

/**
 * Imports a string into the database
 *
 * @param $op
 *   Operation to perform: "db-store", "db-report", "mem-store" or "mem-report"
 * @param $value
 *   Details of the string stored
 * @param $mode
 *   Should existing translations be replaced ("overwrite" or "keep")
 * @param $lang
 *   Language to store the string in
 * @see _locale_import_one_string
 */
function l10n_community_import_saver($op, $value = NULL, $lang = NULL, $mode = NULL) {
  static $additions = 0;
  static $updates = 0;
  static $headerdone = FALSE;
  static $strings = array();
  switch ($op) {
    case "mem-report":              // Return stored strings
      return $strings;
    case "mem-store":               // Store string in memory (only supports single strings)
      $strings[$value["msgid"]] = $value["msgstr"];
      return;
    case "db-report":               // Called at end of import to inform the user
      return array($headerdone, $additions, $updates);
    case "db-store":                // Store the string we got in the database
      if ($value["msgid"] == "") {  // We got header information
        $headerdone = TRUE;
        return;
      }
      $comments     = _locale_import_shorten_comments($value["#"]);
      global $user, $_l10n_community_project;
      $official     = l10n_community_get_permission($lang, $user);
      $string       = explode("\0", $value["msgid"], 2);
      $translations = (is_array($value["msgstr"])) ? $value["msgstr"] : array($value["msgstr"]);
      while (list($str) = each($string)) {
        if ($sid = db_result(db_query("SELECT sid FROM {l10n_server_source} WHERE source = '%s' AND project= '%s' AND ptid = %d;",
            $string[$str], $_l10n_community_project, $str))) {
          $strings = l10n_community_target_save($sid, $translations[$str], $lang, $user->uid);
        }
      }
      return $strings;
  }
}

/**
 * Save a translated string into database.
 *
 * @param $sid
 *   Source string identifier.
 * @param $translation
 *   The translation string.
 * @param $langcode
 *   Language code, for example: 'hu', 'pt-br', 'de', 'it' and so on.
 * @param $uid
 *   User ID.
 *
 * @return
 *   An array with two elements: (number of inserts done, number of updates done).
 *
 * @todo
 *   Handle permission levels, suggestions and fuzzy changes.
 */
function l10n_community_target_save($sid, $translation, $langcode, $uid) {
  $string = db_fetch_object(db_query("SELECT sid, translation FROM {l10n_server_translation} WHERE sid = %d AND language = '%s'", $sid, $langcode));
  if (isset($string->sid) && ($string->translation != $translation)) {
    // String translation exists in this language code, and what we should save now is different -> UPDATE.
    db_query("UPDATE {l10n_server_translation} SET translation = '%s', changed = %d, uid = %d WHERE sid = %d AND language = '%s';", $translation, time(), $uid, $sid, $langcode);
    // One updated, zero inserted.
    return array(0, 1);
  }
  elseif (!isset($string->sid)) {
    // No translation yet -> INSERT.
    db_query("INSERT INTO {l10n_server_translation} (sid, translation, language, uid, changed) VALUES (%d, '%s', '%s', %d, %d)", $sid, $translation, $langcode, $uid, time());
    // One inserted, zero updated.
    return array(1, 0);
  }
}

// = Theme functions ===========================================================

/**
 * Progress bar display for translation status information.
 */
function theme_l10n_progress_columns($sum, $translated, $suggested) {
  // Compute numbers, percentages and provide alternate text titles.
  $status = array(
    'translated' => array((int) $translated, round($translated / $sum * 100, 2), t('!percent translated')),
    'suggested' => array((int) $suggested,  round($suggested / $sum * 100, 2),  t('!percent suggested')),
    'untranslated' => array($sum - $translated - $suggested, 0, t('!percent untranslated')),
  );
  $status['untranslated'][1] = 100 - $status['suggested'][1] - $status['translated'][1];
  
  // Visual summary with a progress bar.
  $bar = '<div class="l10n-community-progress">';
  foreach ($status as $key => $values) {
    if ($values[1] > 0) {
      $bar .= '<div class="l10n-community-progress-'. $key . '" style="width:'. $values[1] .'%;" title="'. strtr($values[2], array('!percent' => $values[1] .'%')) .'"></div>';
    }
  }
  $bar .= '</div>';
  
  return array($bar, $status['translated'][0] .' ('. $status['translated'][1] .'%)', $status['suggested'][0], $status['untranslated'][0]);
}

// = Utility functions =========================================================

/**
 * Helper function for language listing.
 */
function l10n_community_languages($key = NULL) {
  static $languages = NULL;
  
  if (!isset($languages)) {
    $result = db_query("SELECT * FROM {locales_meta} WHERE locale != 'en' ORDER BY name ASC");
    $languages = array();
    while ($language = db_fetch_object($result)) {
      $languages[$language->locale] = $language;
    }
  }
  
  if (isset($key)) {
    // Build list of values with the specific key, if asked.
    $result = array();
    foreach ($languages as $language) {
      $result[$language->locale] = $language->$key;
    }
    return $result;
  }
  else {
    // Return full object list otherwise.
    return $languages;
  }
}

/**
 * Helper function for group listing.
 */
function l10n_community_groups() {
  static $groups = NULL;
  
  if (!isset($groups)) {
    $groups = array();
    $result = db_query('SELECT nid, language FROM {l10n_community_group}');
    while ($group = db_fetch_object($result)) {
      $groups[$group->language] = $group;
    }
  }
  
  return $groups;
}

/**
 * Status constants to URL parts mapping
 */
function l10n_community_status_indicators($flip = FALSE) {
  $mapping = array(
    L10N_STATUS_ALL => 'all',
    L10N_STATUS_TRANSLATED => 'translated',
    L10N_STATUS_UNTRANSLATED => 'untranslated',
    L10N_STATUS_SUGGESTED => 'suggested',
  );
  return ($flip ? array_flip($mapping) : $mapping);
}

/**
 * Get translation permission level for a specific user.
 *
 * @param $langcode
 *   Language code, for example 'hu', 'pt-br', 'de' or 'it'.
 * @param $account
 *   Optional user account.
 * @return
 *   number, 0 = not allowed, 1 = allowed to suggest, 2 = allowed to translate
 */
function l10n_community_get_permission($langcode, $account = NULL) {
  static $permissions = array();
  global $user;
  
  if (empty($langcode)) {
    return L10N_PERM_NONE;
  }
  if (!isset($account)) {
    $account = $user;
  }
  
  if (isset($permissions[$account->uid][$langcode])) {
    // Return cached value if available.
    return $permissions[$account->uid][$langcode];
  }
  
  $perm = L10N_PERM_NONE; 
  
  if ($account->uid == 1) {
    // The administrator has all permissions in all groups.
    $perm = L10N_PERM_ALL;
  }
  
  if ($group_nid = db_result(db_query("SELECT nid FROM {l10n_community_group} WHERE language = '%s';", $langcode))) {
    if (!empty($account->og_groups) and !empty($account->og_groups[$group_nid])) {
      if (!empty($account->og_groups[$group_nid]['is_admin'])) {
        // Administrators of groups have all permissions in the group.
        $perm = L10N_PERM_ALL; 
      }
      else if ($account->og_groups[$group_nid]['is_active']) {
        // Members in the group have permission to suggest.
        $perm = L10N_PERM_SUGGEST;
      }
    }
  }
  
  // Record result in local cache.
  return ($permissions[$account->uid][$langcode] = $perm);
}

/**
 * Copy button for string values.
 */
function theme_l10n_community_copy_button($id = 0) {
  $title = t('Copy value to edit field.');
  return ' <img src="'. base_path() . drupal_get_path('module', 'l10n_community') .'/img/edit-copy.png" alt="'. $title .'" title="'. $title .'" id="l10n-community-copy-'. $id .'" class="l10n-community-copy" />';
}
