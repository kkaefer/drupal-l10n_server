<?php
// $Id: l10n_community.module,v 1.1.2.15 2007-09-13 10:56:10 goba Exp $

/**
 * @file
 *   A community web interface for Drupal project translation.
 *
 *   Build on organic groups to provide a convinient web interface
 *   for translators to collaborate on Drupal project translations.
 */

/**
 * Open translation model, here all team members can translate.
 */
define('L10N_MODEL_OPEN', 0);

/**
 * Restricted translation model, where only admins can translate.
 */
define('L10N_MODEL_RESTRICTED', 1);

/**
 * Regular users have no permission to approve or suggest translations.
 */
define('L10N_PERM_NONE', 0);

/**
 * Translation group members have permission to suggest.
 */
define('L10N_PERM_SUGGEST', 1);

/**
 * User #1 and group administrators have permission to approve and
 * add translations without approval.
 */
define('L10N_PERM_ALL', 2);

// = Core hooks ================================================================

/**
 * Implementation of hook_help().
 */
function l10n_community_help($section) {
  global $user;
  
  switch ($section) {
    case 'translate/languages':
      return '<p>'. t('Choose a language, and then either go to the project list or the group page. There is also a <a href="@by-project-link">by-project listing</a> available, which allows you to dig into languages from the project angle.', array('@by-project-link' => url('translate/projects'))) .'</p>';
    case 'translate/projects':
      return '<p>'. t('Choose a project, and then either export translation templates, or click on the project name to go to the language list to pick a language to translate to. There is also a <a href="@by-language-link">by-language listing</a> available, which allows you to dig into projects from the language angle.', array('@by-language-link' => url('translate/languages'))) .'</p>';
  }
  if (preg_match('!translate/languages/(?P<langcode>[^/]+)(/(?P<uri>[^/]+)(/(?P<action>import|export))?)?$!', $section, $args) ||
      (preg_match('!translate/projects/(?P<uri>[^/]+)(/(?P<langcode>[^/]+)(/(?P<action>import|export))?)?$!', $section, $args) &&
      !preg_match('!translate/projects/([^/]+)/export$!', $section))) {
    $perm = isset($args['langcode']) ? l10n_community_get_permission($args['langcode']) : L10N_PERM_NONE;
    $languages = l10n_community_languages('name');
    $groups = l10n_community_groups();
    $permtext = '';
    switch ($perm) {
      // Inform user about her permission level in this group.
      case L10N_PERM_NONE:
        $permtext = t('You are not a member of this translation group, but you can still view the existing translations and export templates or translations for your own use.') .' '. ($user->uid ? t('<a href="@group">Subscribe to this group</a> if you would like to help out.', array('@group' => url('node/'. $groups[$args['langcode']]->nid))) : t('<a href="@register">Create an account or log in</a> and <a href="@group">subscribe to this group</a> if you would like to help out.', array('@register' => url('user'), '@group' => url('node/'. $groups[$args['langcode']]->nid))));
        break;
      case L10N_PERM_SUGGEST:
        $permtext = t('You are a member of this translation group, so you can suggest translations and import complete Gettext translation files to suggest more strings at once. Administrators of this group will either accept or decline suggestions provided by members of the group. Feel free to export translation templates, or the current state of the translation if you are more comfortable working offline.');
        break;
      case L10N_PERM_ALL:
        $permtext = t('As a member of this translation group, you can suggest translations as well as approve translations suggested by other members of the group. Export/import of Gettext translation files is also possible.');
        break;
    }
    if (!isset($args['action'])) {
      if (!isset($args['uri'])) {
        // Only language code => project list if shown.
        $output = '<p>'. t('This page shows a list of all projects and their overall translation status in this language (accumulated for all releases). The <a href="@group">%language group</a> might provide you with more information, translation suggestions and guidelines.', array('@group' => url('node/'. $groups[$args['langcode']]->nid), '%language' => $languages[$args['langcode']])) .' '. $permtext .'</p>';
        return $output;
      }
      elseif (!isset($args['langcode'])) {
        // Only project => language list if shown.
        $output = '<p>'. t('This page shows a list of projects and their overall translation status for all languages (accumulated for all releases).') .' '. $permtext .'</p>';
        return $output;
      }
      else {
        // Language code and project.
        return '<p>'. $permtext .'</p>';
      }
    }
    else {
      switch ($args['action']) {
        case 'import':
          return '<p>'. $permtext .' '. t('Because all project translations are shared, although you import this file for this project, it might provide translations for strings used in other projects too.') .'</p>';
        case 'export':
          return '<p>'. $permtext .' '. t('You have two different options to export. You can either export a template package for this project, or a package containing the existing translations for a given release. Both types will use the GNU Gettext Portable Object (Template) format, which is understood by Drupal and desktop translation editing tools.') . '</p>';
      }
    }
  }
}

/**
 * Implementation of hook_menu().
 *
 * Note that all menu items are accessible to anyone, because
 * all functionality can be presented in a view-only form, which
 * anonymous users should be able to browse.
 */
function l10n_community_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    // Main menu items (cacheable)
    $items[] = array(
      'title' => t('Translate Drupal'),
      'path' => 'translate',
      'callback' => 'l10n_community_home',
      'access' => TRUE,
    );
    $items[] = array(
      'title' => t('Overview'),
      'path' => 'translate/overview',
      'access' => TRUE,
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -20,
    );
    $items[] = array(
      'title' => t('By language'),
      'description' => t('Overview of languages and their translation status.'),
      'path' => 'translate/languages',
      'callback' => 'l10n_community_overview_languages',
      'access' => TRUE,
      'type' => MENU_LOCAL_TASK,
      'weight' => -10,
    );
    $items[] = array(
      'title' => t('By project'),
      'description' => t('Overview of projects and their translation status.'),
      'path' => 'translate/projects',
      'callback' => 'l10n_community_overview_projects',
      'access' => TRUE,
      'type' => MENU_LOCAL_TASK,
      'weight' => -5,
    );
  }    
  elseif (arg(0) == 'translate') {
    $items[] = array(
      'title' => t('String details'),
      'path' => 'translate/details',
      'callback' => 'l10n_community_string_details',
      'access' => TRUE,
      'type' => MENU_CALLBACK,
    );
    
    drupal_add_css(drupal_get_path('module', 'l10n_community') .'/l10n_community.css', 'module');
    // The translate home page uses this to present admin page like panels.
    drupal_add_css(drupal_get_path('module', 'system') .'/admin.css', 'module');

    if (arg(1) == 'languages') {
      if (($langcode = arg(2)) && ($languages = l10n_community_languages('name')) && isset($languages[$langcode])) {
        // Menu item for language.
        $items[] = array(
          'title' => $languages[$langcode],
          'description' => t('Projects and their translation status.'),
          'path' => 'translate/languages/' . $langcode,
          'callback' => 'l10n_community_status_projects',
          'callback arguments' => array($langcode),
          'access' => TRUE,
          'type' => MENU_CALLBACK,
        );
        if (($uri = arg(3)) && ($projects = l10n_server_get_projects()) && isset($projects[$uri])) {
          // Menu item for project listing based on language.
          $items[] = array(
            'title' => t('Translate'),
            'path' => 'translate/languages/' . $langcode .'/'. $uri,
            'callback' => 'l10n_community_translate_page',
            'callback arguments' => array($langcode, $uri),
            'access' => TRUE,
            'type' => MENU_CALLBACK,
          );
          // Menu items to translate, import and export projects.
          $items[] = array(
            'title' => t('Translate'),
            'path' => 'translate/languages/' . $langcode .'/'. $uri .'/translate',
            'type' => MENU_DEFAULT_LOCAL_TASK,
            'weight' => -10,
          );
          $items[] = array(
            'title' => t('Import'),
            'path' => 'translate/languages/' . $langcode .'/'. $uri .'/import',
            'callback' => 'drupal_get_form',
            'callback arguments' => array('l10n_community_import_form', $langcode),
            'type' => MENU_LOCAL_TASK,
            'weight' => -5,
            'access' => l10n_community_get_permission($langcode) != L10N_PERM_NONE,
          );
          $items[] = array(
            'title' => t('Export'),
            'path' => 'translate/languages/' . $langcode .'/'. $uri .'/export',
            'callback' => 'drupal_get_form',
            'callback arguments' => array('l10n_community_export_form', $uri, $langcode),
            'type' => MENU_LOCAL_TASK,
            'weight' => 0,
          );
        }
      }
    }
    
    if (arg(1) == 'projects') {
      if (($uri = arg(2)) && ($projects = l10n_server_get_projects()) && isset($projects[$uri])) {
        // Menu item for project listing.
        $items[] = array(
          'title' => $projects[$uri]->title,
          'description' => t('Languages and their translation status.'),
          'path' => 'translate/projects/' . $uri,
          'callback' => 'l10n_community_status_languages',
          'callback arguments' => array($uri),
          'access' => TRUE,
          'type' => MENU_CALLBACK,
        );
        $items[] = array(
          'title' => t('Export template'),
          'path' => 'translate/projects/' . $uri .'/export',
          'callback' => 'drupal_get_form',
          'callback arguments' => array('l10n_community_export_form', $uri),
          'type' => MENU_CALLBACK,
        );
        if (($langcode = arg(3)) && ($languages = l10n_community_languages('name')) && isset($languages[$langcode])) {
          // Menu item for language listing based on project.
          $items[] = array(
            'title' => t('Translate'),
            'path' => 'translate/projects/' . $uri .'/'. $langcode,
            'callback' => 'l10n_community_translate_page',
            'callback arguments' => array($langcode, $uri),
            'access' => TRUE,
            'type' => MENU_CALLBACK,
          );
          // Menu items to translate, import and export projects.
          $items[] = array(
            'title' => t('Translate'),
            'path' => 'translate/projects/' . $uri .'/'. $langcode .'/translate',
            'type' => MENU_DEFAULT_LOCAL_TASK,
            'weight' => -10,
          );
          $items[] = array(
            'title' => t('Import'),
            'path' => 'translate/projects/' . $uri .'/'. $langcode .'/import',
            'callback' => 'drupal_get_form',
            'callback arguments' => array('l10n_community_import_form', $langcode),
            'type' => MENU_LOCAL_TASK,
            'weight' => -5,
            'access' => l10n_community_get_permission($langcode) != L10N_PERM_NONE,
          );
          $items[] = array(
            'title' => t('Export'),
            'path' => 'translate/projects/' . $uri .'/'. $langcode .'/export',
            'callback' => 'drupal_get_form',
            'callback arguments' => array('l10n_community_export_form', $uri, $langcode),
            'type' => MENU_LOCAL_TASK,
            'weight' => 0,
          );
        }
      }
    }
  }
  return $items;
}

/**
 * Implementation of hook_block().
 */
function l10n_community_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks = array(
        0 => array(
          'info' => t('Translation help'),
          'weight' => 0,
          'enabled' => 1,
          'region' => 'left'
        )
      );
      return $blocks;
    
    case 'view':
      // Named patterns used to support two URL forms. See hook_help for information.
      if (preg_match('!translate/languages/(?P<langcode>[^/]+)/(?P<uri>[^/]+)!', $_GET['q'], $args) ||
          (preg_match('!translate/projects/(?P<uri>[^/]+)/(?P<langcode>[^/]+)!', $_GET['q'], $args) &&
          !preg_match('!translate/projects/([^/]+)/export!', $_GET['q']))) {
        // Only show block if we have valuable and relevant information.
        $languages = l10n_community_languages();
        $items = array();
        $items[] = t('!newline_image represents a line break. Remember to include a line break in the same position in the translation, even if it is at the beginning or end!', array('!newline_image' => ' <img src="'. base_path() . drupal_get_path('module', 'l10n_community') .'/images/newline.png" alt="'. t('Newline marker.') . '" /> '));
        $items[] = t('Variables are designated with !, @ and % (like %example, !example or @example), and should be kept in the text as-is.');
        $formula = join(' ', preg_split('!(&&|\\|\\||%|<=|>=|==|\\!=|\\?|:)!', $languages[$args['langcode']]->formula, -1, PREG_SPLIT_DELIM_CAPTURE));
        $items[] = t('The plural formula in use with this language is %formula.', array('%formula' => str_replace('$n', 'n', $formula)));
        return array(
          'subject' => t('Translation help'),
          'content' => theme('item_list', $items),
        );
      }
  }
}

/**
 * Implemenation of hook_form_alter().
 */
function l10n_community_form_alter($form_id, &$form) {
  // All languages have a single translation group, you cannot create more.
  if ($form_id == 'l10n_group_node_form' && empty($form['l10n_community_language']['#value']) && empty($form['l10n_community_language']['#options'])) {
    drupal_set_message(t("All available languages have groups now. You cannot create another group."), 'error');
    $form['submit']['#disabled'] = TRUE;
  }
}

// = Organic group node type ===================================================

/**
 * Implementation of hook_node_info().
 */
function l10n_community_node_info() {
  return array(
    'l10n_group' => array(
      'name' => t('Translation group'),
      'module' => 'l10n_community',
      'description' => t('A language community around Drupal project translations.'),
    )
  );
}

/**
 * Implementation of hook_insert().
 */
function l10n_community_insert(&$node) {
  db_query("INSERT INTO {l10n_community_group} (nid, language, model) VALUES (%d, '%s', %d)", $node->nid, $node->l10n_community_language, $node->l10n_community_model);
}

/**
 * Implementation of hook_delete().
 */
function l10n_community_delete(&$node) {
  db_query('DELETE FROM {l10n_community_group} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_update().
 */
function l10n_community_update($node) {
  if ($nid = db_result(db_query('SELECT nid FROM {l10n_community_group} WHERE nid = %d', $node->nid))) {
    db_query("UPDATE {l10n_community_group} SET language = '%s', model = %d WHERE nid = %d", $node->l10n_community_language, $node->l10n_community_model, $node->nid);
  }
  else {
    l10n_community_insert($node);
  }
}

/**
 * Implemenation of hook_load().
 */
function l10n_community_load(&$node) {
  return db_fetch_object(db_query('SELECT language AS l10n_community_language, model as l10n_community_model FROM {l10n_community_group} WHERE nid = %d', $node->nid));
}

/**
 * Implementation of hook_access().
 */
function l10n_community_access($op, $node) {
  if ($op == 'view') { 
    // Users can always see the translation group page.
    return TRUE;
  }
  if (user_access('administer localization server')) { 
    // But only few can delete/edit.
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_form().
 */
function l10n_community_form(&$node) {
  $form = array();
  // Create a list of languages on the site having no translation group.
  $groups = db_query('SELECT language FROM {l10n_community_group}');
  $languages = l10n_community_languages('name');
  while ($group = db_fetch_object($groups)) {
    if ($languages[$group->language]) {
      unset($languages[$group->language]);
    }
  }
  
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Group name'),
    '#description' => t('Name of the translation group.'),
    '#default_value' => isset($node->title) ? $node->title : '',
    '#weight' => -5,
    '#required' => TRUE
  );
  if (!empty($node->l10n_community_language)) {
    // Already attached to a language, not possible to modify.
    $form['l10n_community_language'] = array(
      '#type' => 'item',
      '#title' => t('Language'),
      '#description' => t('The language managed by this group.'),
      '#value' => $node->l10n_community_language,
      '#weight' => -5
    );
  }
  else {
    // Not yet attached to a language.
    $form['l10n_community_language'] = array(
      '#type' => 'select',
      '#title' => t('Language'),
      '#description' => t('The language managed by this group.'),
      '#options' => $languages,
      '#weight' => -5,
      '#required' => TRUE
    );
  }
  $form['l10n_community_model'] = array(
    '#type' => 'radios',
    '#title' => t('Permission model'),
    '#description' => t('Whether different types of group members have different permissions.'),
    '#default_value' => isset($node->l10n_community_model) ? $node->l10n_community_model : L10N_MODEL_OPEN,
    '#options' => array(L10N_MODEL_OPEN => t('Everybody is equal. All members can suggest and approve translations.'), L10N_MODEL_RESTRICTED => t('Members can only suggest translations, group administrators can approve them.')),
    '#weight' => -3
  );
  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Welcome message'),
    '#description' => t('Welcome message to display on the group homepage.'),
    '#default_value' => isset($node->body) ? $node->body : '',
    '#rows' => 5,
  );
  $form['format'] = isset($node->format) ? filter_form($node->format) : filter_form();
  return $form;
}

// = Status pages ==============================================================

function l10n_community_home() {
  include_once drupal_get_path('module', 'l10n_community') .'/l10n_community_home.inc';
  return $output;
}

/**
 * Translation status overview for all languages.
 */
function l10n_community_overview_languages() {
  if (!$languages = l10n_community_languages('name')) {
    drupal_set_message(t('No languages to list.'), 'error');
    return '';
  }

  if (!$num_source = l10n_server_get_string_count('all')) {
    drupal_set_message(t('No strings to translate.'), 'error');
    return '';
  }
  
  $groups = l10n_community_groups();
  $table = array();
  $string_counts = l10n_server_get_string_count('languages');
  foreach ($languages as $langcode => $language) {
    $group = isset($groups[$langcode]) ? l(t('Group'), 'node/'. $groups[$langcode]->nid, array('title' => t('To the group homepage.'))) : t('n/a');
    $table[] = array_merge(
      array(
        array('data' => "<strong>$language</strong> ($langcode)", 'class' => 'language'),
        l(t('Projects'), 'translate/languages/'. $langcode, array('title' => t('To the project list.'))),
        $group
      ),
      theme('l10n_progress_columns', $num_source, (isset($string_counts[$langcode]) ? $string_counts[$langcode] : 0))
    );
  }
  return theme(
    'table',
    array(
      array('data' => t('Language'), 'class' => 'language'),
      t('Projects'),
      t('Group'),
      t('Overall status'),
      t('Translated'),
      //t('Suggested'),
      t('Untranslated')
    ),
    $table,
    array('id' => 'l10n-community-overview')
  );
}

/**
 * Translation status overview for all projects.
 */
function l10n_community_overview_projects() {
  $output = '';
  if ($projects = l10n_server_get_projects(NULL, 10)) {
    $output = theme("pager", NULL, 10, 0);
    $table = array();
    $string_counts = l10n_server_get_string_count('projects');
    foreach ($projects as $uri => $project) {
      if (isset($string_counts[$project->pid])) {
        $table[] = array_merge(array(l($project->title, 'translate/projects/'. $uri), l(t('Export'), 'translate/projects/'. $uri . '/export')), theme('l10n_progress_columns', $string_counts[$project->pid][0], $string_counts[$project->pid][1]));
      }
    }
    $output .= theme('table', array(t('Project'), t('Export template'), t('Overall status'), t('Translated')/*, t('Suggested')*/, t('Untranslated')), $table);
    $output .= theme("pager", NULL, 10, 0);
  }
  else {
    drupal_set_message(t('No projects found.'));
  }
  return $output;
}

/**
 * Translation status page of all projects from a given language.
 *
 * @param $langcode
 *   Language code, for example 'hu', 'pt-br', 'de', 'it'.
 */
function l10n_community_status_projects($langcode = NULL) {
  if (!isset($langcode)) {
    drupal_set_message(t('No language selected.'), 'error');
    return '';
  }
  $perm = l10n_community_get_permission($langcode);
  
  drupal_set_title(t('@language projects overview', array('@language' => drupal_get_title())));
  
  if ($projects = l10n_server_get_projects(NULL, 10)) {
    $output = theme("pager", NULL, 10, 0);
    $table = array();
    $string_counts = l10n_server_get_string_count('projects', $langcode);
    foreach ($projects as $uri => $project) {
      if (isset($string_counts[$project->pid])) {
        $table[] = array_merge(
          array(
            l($project->title, 'translate/languages/'. $langcode .'/' . $uri),
            ($perm != L10N_PERM_NONE ? l(t('Import'), 'translate/languages/'. $langcode . '/'. $uri .'/import') : t('n/a')),
            l(t('Export'), 'translate/languages/'. $langcode . '/'. $uri .'/export')
          ),
          theme('l10n_progress_columns', $string_counts[$project->pid][0], $string_counts[$project->pid][1])
        );
      }
    }
    $output .= theme('table', array(t('Project'), t('Import'), t('Export'), t('Overall status'), t('Translated')/*, t('Suggested')*/, t('Untranslated')), $table);
    $output .= theme("pager", NULL, 10, 0);
  }
  return $output;
}

/**
 * Translation status page of all languages for a given project.
 *
 * @param $uri
 *   Project URI.
 */
function l10n_community_status_languages($uri = NULL) {
  if (!isset($uri)) {
    drupal_set_message(t('No project selected.'), 'error');
    return '';
  }
  drupal_set_title(t('@project languages overview', array('@project' => drupal_get_title())));
  
  if (!$languages = l10n_community_languages('name')) {
    drupal_set_message(t('No languages to list.'), 'error');
    return '';
  }

  $project = l10n_server_get_projects($uri);
  $num_source = l10n_server_get_string_count('project', $project->pid);
  $string_counts = l10n_server_get_string_count('languages', $project->pid);
  
  $table = array();
  foreach ($languages as $langcode => $language) {
    $perm = l10n_community_get_permission($langcode);
    $table[] = array_merge(
      array(
        array('data' => l("<strong>$language</strong> ($langcode)", 'translate/projects/'. $uri . '/'. $langcode, array(), NULL, NULL, FALSE, TRUE), 'class' => 'language'),
        ($perm != L10N_PERM_NONE) ? l(t('Import'), 'translate/projects/'. $uri . '/'. $langcode .'/import') : t('n/a'),
        l(t('Export'), 'translate/projects/'. $uri . '/'. $langcode .'/export'),
      ),
      theme('l10n_progress_columns', $num_source, $string_counts[$langcode])
    );
  }

  return theme(
    'table',
    array(
      array('data' => t('Language'), 'class' => 'language'),
      t('Import'),
      t('Export'),
      t('Overall status'),
      t('Translated'),
      /*t('Suggested'),*/
      t('Untranslated')
    ),
    $table,
    array('id' => 'l10n-community-overview')
  );
}

// = Translation web interface =================================================

function l10n_community_translate_page($langcode = NULL, $uri = NULL) {
  
  // Provide accurate page title, depending on permission. At this point, the
  // user already selected a language, and the project is the most important
  // information, so we only format that as a placeholder.
  $project = l10n_server_get_projects($uri);
  $languages = l10n_community_languages();
  $perm = l10n_community_get_permission($langcode);
  if ($perm == L10N_PERM_NONE) {
    drupal_set_title(t('@language %project translations', array('%project' => $project->title, '@language' => $languages[$langcode]->name)));
  }
  else {
    drupal_set_title(t('Translate %project to @language', array('%project' => $project->title, '@language' => $languages[$langcode]->name)));
  }

  drupal_add_js(drupal_get_path('module', 'l10n_community') .'/l10n_community.js');

  // Build values for the form generation.
  list ($status, $release, $search) = l10n_community_filter_build();
  $output = drupal_get_form('l10n_community_filter_form', $uri, $status, $release, $search);
  // Retrieve values stored from the form changes.
  list ($status, $release, $search) = l10n_community_filter_build();
  
  $strings = l10n_server_get_strings($project, $languages[$langcode]->locale, $status, $release, $search, 10);
  if (!count($strings)) {
    drupal_set_message(t('No strings found with this filter.'));
  }
  elseif ($perm != L10N_PERM_NONE) {
    $output .= drupal_get_form('l10n_community_translate_form', $strings, $languages[$langcode], $uri, $perm);
  }
  else {
    $output .= drupal_get_form('l10n_community_translate_view', $strings, $languages[$langcode], $uri);
  }
  return $output;
}

/**
 * Translate form filter.
 */
function l10n_community_filter_form($uri, $status = L10N_STATUS_ALL, $release = 'all', $search  = '') {
  $status_options = array(
    L10N_STATUS_ALL => t('All'),
    L10N_STATUS_UNTRANSLATED => t('Untranslated'),
    L10N_STATUS_SUGGESTED => t('Suggested'),
    L10N_STATUS_TRANSLATED => t('Translated'),
  );
  $form['filters'] = array(
    '#title' => t('Display settings'),
    '#type' => 'fieldset',
    '#prefix' => '<div id="l10n-community-filter" class="container-inline">',
    '#suffix' => '</div>',
  );
  $form['filters']['status'] = array(
    '#title' => t('Status'),
    '#type' => 'select',
    '#options' => $status_options,
    '#default_value' => $status,
  );
  $releases = l10n_server_get_releases($uri);
  $release_options = array('all' => t('All'));
  foreach ($releases as $rid => $this_release) {
    $release_options[$rid] = $this_release->title;
  }
  $form['filters']['release'] = array(
    '#title' => t('Release'),
    '#type' => 'select',
    '#options' => $release_options,
    '#default_value' => isset($release) ? $release : 'all',
  );
  $form['filters']['search'] = array(
    '#title' => t('Search'),
    '#type' => 'textfield',
    '#default_value' => $search,
  );
  $form['filters']['submit'] = array(
    '#value' => t('Filter'),
    '#type' => 'submit',
  );
  return $form;
}

/**
 * Submission handler for filtering form.
 */
function l10n_community_filter_form_submit($form_id, &$form) {
  // Remember filters for later use, so translators don't need to
  // reenter them, pagers keep their value and so on. Note: these will
  // be 'personal', ie. not included in website links.
  $_SESSION['l10n_community_filter'] = array(
    'status'  => intval($form['status']),
    'release' => is_numeric($form['release']) ? $form['release'] : NULL,
    'search'  => $form['search'],
  );
  // This redirects back to the first translation page, by design.
}

/**
 * Builds a list of 'status', 'release' and 'search' values, as remembered from the request.
 */
function l10n_community_filter_build() {
  return array(
    isset($_SESSION['l10n_community_filter']['status']) ? intval($_SESSION['l10n_community_filter']['status']) : L10N_STATUS_ALL,
    isset($_SESSION['l10n_community_filter']['release']) ? $_SESSION['l10n_community_filter']['release'] : NULL,
    isset($_SESSION['l10n_community_filter']['search']) ? $_SESSION['l10n_community_filter']['search'] : '',
  );
}

/**
 * Translation web interface.
 *
 * @param $strings
 *   Array of strings to display.
 * @param $language
 *   Language object.
 * @param $uri
 *   Project URI.
 * @param $perm
 *   Community permission level of user watching the page.
 */
function l10n_community_translate_form($strings = array(), $language = NULL, $uri = NULL, $perm = L10N_PERM_SUGGEST) {
  $form = $js_strings = array();
  
  $form['#tree'] = TRUE;
  $form['pager'] = array(
    '#value' => theme('pager', NULL, 10, 0)
  );
  $form['langcode'] = array(
    '#type' => 'value',
    '#value' => $language->locale
  );
  $form['project'] = array(
    '#type' => 'value',
    '#value' => $uri
  );

  foreach ($strings as $id => $string) {
    $form[$id] = array(
      '#type' => 'fieldset',
      '#attributes' => array('id' => 'l10n-community-fields-'. $string->sid),
    );
    $form[$id]['sid'] = array(
      '#type' => 'value',
      '#value' => $string->sid
    );
    // Include sid as hidden field for JavaScript to call us back with it.
    $form[$id]['sid_callback'] = array(
      '#type' => 'hidden',
      '#attributes' => array('class' => 'l10n-community-sid-callback'),
      '#value' => url('translate/details/'. $string->sid .'/'. $language->locale)
    );
    $form[$id]['toolbox'] = array(
      '#type' => 'markup',
      '#value' => '<div class="toolbox" id="l10n-community-toolbox-'. $id .'"></div>'
    );


    if ($string->plural) {
      // Multiple source strings if we deal with plurals.
      $parts = explode(chr(0), $string->value);
      $string_parts = array();
      foreach ($parts as $i => $part) {
        $target = $id .'-'. $i;
        $js_strings[$target] = $part;
        $string_parts[] = theme('l10n_community_copy_button', $target) .' '. l10n_community_format_text(check_plain($part));
      }
      $source = theme('item_list', $string_parts);
    }
    else {
      // Single source string otherwise.
      $source = theme('l10n_community_copy_button', $id) .' '. l10n_community_format_text(check_plain($string->value));
      $js_strings[$id] = $string->value;
    }

    $form[$id]['source'] = array(
      '#prefix' => '<div>',
      '#type' => 'markup',
      '#value' => $source,
      '#suffix' => '</div>',
    );

    $translated = !empty($string->translation);
    if ($string->plural) {
      $translations = ($translated ? explode("\0", $string->translation) : array_fill(0, $language->plurals, ''));
      if ($translated) {
        $string_parts = array();
        for($i = 0; $i < $language->plurals; $i++) {
          $target = $id .'-'. $i;
          $string_parts[] = theme('l10n_community_copy_button', $target .'-t') .' '. l10n_community_format_text(check_plain($translations[$i]));
          $js_strings[$target .'-t'] = $translations[$i];
        }
        $form[$id]['translation'] = array(
          '#prefix' => '<div class="translation">',
          '#type' => 'markup',
          '#value' => theme('item_list', $string_parts),
          '#suffix' => '</div>',
        );
      }
      
      for($i = 0; $i < $language->plurals; $i++) {
        $target = $id .'-'. $i;
        $form[$id]['new_translation'][$i] = array(
          // Hide textareas of translated stuff to save some space and guide user eyes.
          '#prefix' => ($translated ? '<div class="hidden l10n-commumnity-wrapper-'. $id .'">' : ''),
          '#type' => 'textarea',
          '#title' => $translated ? t('New translation for variant #%d', array('%d' => $i)) : t('Translation for variant #%d', array('%d' => $i)),
          '#rows' => 1,
          '#id' => 'l10n-commumnity-new-translation-'. $target,
          '#suffix' => ($translated ? '</div>' : ''),
        );
      }
    }
    else {
      if ($translated) {
        $form[$id]['translation'] = array(
          '#prefix' => '<div class="translation">',
          '#type' => 'markup',
          '#value' => theme('l10n_community_copy_button', $id .'-t') .' '. l10n_community_format_text(check_plain($string->translation)),
          '#suffix' => '</div>',
        );
        $js_strings[$id .'-t'] = $string->translation;
      }
      $form[$id]['new_translation'] = array(
        // Hide textareas of translated stuff to save some space and guide user eyes.
        '#prefix' => ($translated ? '<div class="hidden l10n-commumnity-wrapper-'. $id .'">' : ''),
        '#type' => 'textarea',
        '#title' => $translated ? t('New translation') : t('Translation'),
        '#rows' => 1,
        '#id' => 'l10n-commumnity-new-translation-'. $id,
        '#suffix' => ($translated ? '</div>' : ''),
      );
    }
  }
  
  // Keep being on the same page when the form is submitted.
  $form['destination'] = array(
    '#type' => 'hidden',
    '#value' => $_GET['q'] . (isset($_GET['page']) ? '?page='. $_GET['page'] : ''),
  );
  
  
  drupal_add_js(
    array(
      'l10n_strings' => $js_strings,
      'l10n_image_path' => drupal_get_path('module', 'l10n_community') . '/images/',
      'l10n_expand_help' => t('Show the translation editing field.'),
      'l10n_lookup_help' => t('Show detailed information about this string.'),
    ),
    'setting'
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save translations')
  );
  return $form;
}

/**
 * Form for translation *viewing* (for those without privileges).
 */
function l10n_community_translate_view($strings = array(), $language = NULL, $uri = NULL) {
  $form['#tree'] = TRUE;
  $form['pager'] = array(
    '#value' => theme('pager', NULL, 10, 0)
  );
  foreach ($strings as $id => $string) {
    $form[$id] = array(
      '#type' => 'fieldset',
      //'#description' => $string->plural ? t('This string should have different plural versions based on the formula for this language.') : '',
    );
    if ($string->plural) {
      // Multiple source strings if we deal with plurals.
      $source = theme('item_list', array_map('l10n_community_format_text', array_map('check_plain', explode(chr(0), $string->value))));
    }
    else {
      // Single source string otherwise.
      $source = l10n_community_format_text(check_plain($string->value));
    }
    $form[$id]['source'] = array(
      '#type' => 'markup',
      '#value' => $source,
    );
    if (!empty($string->translation)) {
      if ($string->plural) {
        $translations = explode("\0", $string->translation);
        for($i = 0; $i < $language->plurals; $i++) {
          $form[$id]['translation'][$i] = array(
            '#type' => 'markup',
            '#value' => '<br />'. $translations[$i],
          );
        }
      }
      else {
        $form[$id]['translation'] = array(
          '#type' => 'markup',
          '#value' => !empty($string->translation) ? '<br />'. $string->translation : '',
        );
      }
    }
  }
  return $form;
}

/**
 * Format translatable strings with custom icons for greater
 * visibility of some items. Newlines and replacement strings
 * are made more visible.
 *
 * @param $string
 *   Source strings to translate.
 */
function l10n_community_format_text($string) {
  $path = base_path() . drupal_get_path('module', 'l10n_community');
  $string = str_replace(array("\n", "\\\\n"), '<img src="'. $path .'/images/newline.png" alt="newline" /><br />', $string);
  $string = preg_replace('~((%|!|@)[0-9a-zA-Z_-]+)~', '<em class="l10n-community-marker">\\1</em>', $string);
  return $string;
}

/**
 * Save translations entered in the web form.
 */
function l10n_community_translate_form_submit($form_id, &$form) {
  global $user;

  $inserted = $updated = $unchanged = 0;
  foreach ($form as $item => $value) {
    if (!is_array($form[$item]) || !isset($form[$item]['new_translation'])) {
      // Skip, if we don't have translations in this form item.
      continue;
    }
    
    $text = '';
    if (is_string($form[$item]['new_translation'])) {
      // Single string representation: simple translation.
      $text = $form[$item]['new_translation'];
    }
    if (is_array($form[$item]['new_translation'])) {
      // Array -> plural variants are provided. Join them with a NULL separator.
      $text = join("\0", $form[$item]['new_translation']);
      if (trim($text) == '') {
        // If the whole string only contains NULL bytes, empty the string, so
        // we don't save an empty translation. Otherwise the NULL bytes need
        // to be there, so we know plural variant indices.
        $text = '';
      }
    }
      
    if ($text) {
      // We have some string to save.
      l10n_community_target_save($form[$item]['sid'], $text, $form['langcode'], $user->uid, $inserted, $updated, $unchanged);
    }
  }
  l10n_community_update_message($inserted, $updated, $unchanged);
}

/**
 * Print a message based on the number of translations changed.
 * Used by both the save and import process.
 */
function l10n_community_update_message($inserted, $updated, $unchanged) {
  // Inform user about changes made.
  $message = array();
  if ($inserted) {
    $message[] = format_plural($inserted, '1 new translation added', '@count new translations added');
  }
  if ($updated) {
    $message[] = format_plural($updated, '1 translation updated', '@count translations updated');
  }
  if ($unchanged) {
    $message[] = format_plural($unchanged, '1 translation unchanged', '@count translations unchanged');
  }
  drupal_set_message(join(', ', $message) .'.');
}

/**
 * Return a HTML list of projects, releases and counts of where strings
 * appear in the managed projects.
 *
 * We could have been provided much more information, but usability should
 * also be kept in mind. It is possible to investigate hidden information
 * sources though, like tooltips on the release titles presented.
 *
 * This callback is invoked from JavaScript and is used as an AHAH provider.
 *
 * @param $sid
 *   String id.
 * @param $langcode
 *   Language code.
 */
function l10n_community_string_details($sid = 0, $langcode = NULL) {
  $result = db_query('SELECT p.pid, p.title project_title, r.rid, r.title release_title, COUNT(l.lineno) as occurance_count FROM {l10n_server_project} p INNER JOIN {l10n_server_release} r ON p.pid = r.pid INNER JOIN {l10n_server_file} f ON r.rid = f.rid INNER JOIN {l10n_server_line} l ON f.fid = l.fid INNER JOIN {l10n_server_string} s ON l.sid = s.sid WHERE s.sid = %d GROUP BY r.rid ORDER by p.pid, r.rid', $sid);
  
  $list = array();
  $output = array();
  $previous_project = '';
  while ($instance = db_fetch_object($result)) {
    if ($instance->project_title != $previous_project) {
      if (!empty($list)) {
        $output[] = join(', ', $list);
      }
      $list = array('<strong>'. $instance->project_title . ':</strong> '. $instance->release_title .' ('. $instance->occurance_count .')');
    }
    else {
      $list[] = $instance->release_title .' ('. $instance->occurance_count .')';
    }
    $previous_project = $instance->project_title; 
  }
  $output[] = join(', ', $list);
  
  $translation_info = '';
  $translation = db_fetch_object(db_query("SELECT t.translation, t.uid, t.changed FROM {l10n_server_string} s LEFT JOIN {l10n_server_translation} t ON s.sid = t.sid WHERE t.language = '%s' AND s.sid = %d", $langcode, $sid));
  if (!empty($translation->translation)) {
    $account = user_load(array('uid' => $translation->uid));
    $translation_info = '<div>'. t('<strong>Translated by:</strong> %username at %date', array('%username' => $account->name, '%date' => format_date($translation->changed))) .'</div>';
  }
  
  print $sid ."\n\n". $translation_info .'<div>'. join('</div><div>', $output) .'</div>';
  exit;
}

// = Import functionality ======================================================

/**
 * User interface for the translation import screen.
 */
function l10n_community_import_form($langcode) {
  $form['#attributes']['enctype'] = 'multipart/form-data';

  // Save the two values we need for 
  $form['langcode'] = array(
    '#type' => 'value',
    '#value' => $langcode,
  );
  
  $form['file'] = array(
    '#type' => 'file',
    '#title' => t('Translation file'),
    '#size' => 50,
    '#description' => t('A gettext Portable Object (.po) file to upload.'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import')
  );
  return $form;
}

/**
 * Process the locale import form submission.
 */
function l10n_community_import_form_submit($form_id, &$form) {
  if ($file = file_save_upload('file')) {
    include_once drupal_get_path('module', 'l10n_server') .'/gettextapi.inc';

    // Increase time limit for PO parsing.
    if (!ini_get('safe_mode')) {
      set_time_limit(240);
    }

    if (gettextapi_import($file, $form['langcode'])) {
      // Get status report on what was done in the process.
      list($inserted, $updated, $unchanged) = gettextapi_import_one_string();
      drupal_set_message(t('The translation was successfully imported.'));
      l10n_community_update_message($inserted, $updated, $unchanged);
    }
  }
  else {
    drupal_set_message(t('File to import not found.'), 'error');
  }
}

/**
 * Save a translated string into database.
 *
 * @param $sid
 *   Source string identifier.
 * @param $translation
 *   The translation string.
 * @param $langcode
 *   Language code, for example: 'hu', 'pt-br', 'de', 'it' and so on.
 * @param $uid
 *   User ID.
 * @param $inserted
 *   Counter to increment if insert is made.
 * @param $updated
 *   Counter to increment if update is made.
 *
 * @return
 *   An array with two elements: (number of inserts done, number of updates done).
 *
 * @todo
 *   Handle permission levels, suggestions and fuzzy changes.
 */
function l10n_community_target_save($sid, $translation, $langcode, $uid, &$inserted, &$updated, &$unchanged) {
  $string = db_fetch_object(db_query("SELECT sid, translation FROM {l10n_server_translation} WHERE sid = %d AND language = '%s'", $sid, $langcode));
  if (isset($string->sid)) {
    if ($string->translation != $translation) {
      // String translation exists in this language code, and what we should save now is different -> UPDATE.
      db_query("UPDATE {l10n_server_translation} SET translation = '%s', changed = %d, uid = %d WHERE sid = %d AND language = '%s';", $translation, time(), $uid, $sid, $langcode);
      $updated++;
    }
    else {
      $unchanged++;
    }
  }
  else {
    // No translation yet -> INSERT.
    db_query("INSERT INTO {l10n_server_translation} (sid, translation, language, uid, changed) VALUES (%d, '%s', '%s', %d, %d)", $sid, $translation, $langcode, $uid, time());
    $inserted++;
  }
}

// = Export functionality ======================================================

/**
 * User interface for the translation export screen.
 */
function l10n_community_export_form($uri, $langcode = NULL) {
  $releases = l10n_server_get_releases($uri);
  $release_options = array('all' => t('All'));
  foreach ($releases as $rid => $this_release) {
    $release_options[$rid] = $this_release->title;
  }
  $form['release'] = array(
    '#title' => t('Release number'),
    '#type' => 'select',
    '#options' => $release_options,
    '#default_value' => isset($release) ? $release : 'all',
    '#description' => t('Exporting a template or translation package for all releases is useful for translators, but is not optimal to use for end users because unused data would clutter up their database, when the file gets imported. Export for all releases if you would like to provide a complete translation working with a desktop tool.'),
  );
  if (isset($langcode)) {
    // Only include the type selector if we are not presenting
    // a template export page (which does not have a language).
    $form['type'] = array(
      '#title' => t('Type of export'),
      '#type' => 'radios',
      '#options' => array('translation' => t('Translation'), 'template' => t('Translation template')),
      '#default_value' => 'translation',
      '#description' => t('Templates only contain the source (English) strings.')
    );
    $form['langcode'] = array(
      '#type' => 'value',
      '#value' => $langcode,
    );
  }
  $form['uri'] = array(
    '#type' => 'value',
    '#value' => $uri,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Export'),
  );
  return $form;
}

/**
 * Generate translation or template package on the fly based on
 * all details available and return the output via HTTP.
 */
function l10n_community_export_form_submit($form_id, &$form) { 
  include_once drupal_get_path('module', 'l10n_server') .'/gettextapi.inc';
  
  $language = NULL;
  if (isset($form['langcode'])) {
    $languages = l10n_community_languages();
    $language = $languages[$form['langcode']];
  }
  $type = (isset($form['type']) ? $form['type'] : 'template');

  // Generate tarball and get file name.
  $filename = gettextapi_export($form['uri'], ($form['release'] == 'all' ? NULL : $form['release']), $language, $type);
  
  // Return compressed archive to user.
  header('Content-Disposition: attachment; filename='. $form['uri'] . (isset($language) ? '-'. $language->locale : '') . ($type == 'template' ? '-templates' : '-translations') .'.tgz');
  header('Content-Type: application/x-compressed');
  echo file_get_contents($filename);
  unlink($filename);
  die();
}


// = Theme functions ===========================================================

/**
 * Progress bar display for translation status information.
 */
function theme_l10n_progress_columns($sum, $translated/*, $suggested*/) {
  // Compute numbers, percentages and provide alternate text titles.
  $status = array(
    'translated' => array((int) $translated, round($translated / $sum * 100, 2), t('!percent translated')),
    //'suggested' => array((int) $suggested,  round($suggested / $sum * 100, 2),  t('!percent suggested')),
    'untranslated' => array($sum - $translated - $suggested, 0, t('!percent untranslated')),
  );
  $status['untranslated'][1] = 100 - /*$status['suggested'][1] -*/ $status['translated'][1];
  
  // Visual summary with a progress bar.
  $bar = '<div class="l10n-community-progress">';
  foreach ($status as $key => $values) {
    if ($values[1] > 0) {
      $bar .= '<div class="l10n-community-progress-'. $key . '" style="width:'. $values[1] .'%;" title="'. strtr($values[2], array('!percent' => $values[1] .'%')) .'"></div>';
    }
  }
  $bar .= '</div>';
  
  return array($bar, $status['translated'][0] .' ('. $status['translated'][1] .'%)'/*, $status['suggested'][0]*/, $status['untranslated'][0]);
}

// = Utility functions =========================================================

/**
 * Helper function for language listing.
 */
function l10n_community_languages($key = NULL) {
  static $languages = NULL;
  
  if (!isset($languages)) {
    $result = db_query("SELECT * FROM {locales_meta} WHERE locale != 'en' ORDER BY name ASC");
    $languages = array();
    while ($language = db_fetch_object($result)) {
      $languages[$language->locale] = $language;
    }
  }
  
  if (isset($key)) {
    // Build list of values with the specific key, if asked.
    $result = array();
    foreach ($languages as $language) {
      $result[$language->locale] = $language->$key;
    }
    return $result;
  }
  else {
    // Return full object list otherwise.
    return $languages;
  }
}

/**
 * Helper function for group listing.
 */
function l10n_community_groups() {
  static $groups = NULL;
  
  if (!isset($groups)) {
    $groups = array();
    $result = db_query('SELECT nid, language FROM {l10n_community_group}');
    while ($group = db_fetch_object($result)) {
      $groups[$group->language] = $group;
    }
  }
  
  return $groups;
}

/**
 * Status constants to URL parts mapping
 */
function l10n_community_status_indicators($flip = FALSE) {
  $mapping = array(
    L10N_STATUS_ALL => 'all',
    L10N_STATUS_TRANSLATED => 'translated',
    L10N_STATUS_UNTRANSLATED => 'untranslated',
    L10N_STATUS_SUGGESTED => 'suggested',
  );
  return ($flip ? array_flip($mapping) : $mapping);
}

/**
 * Get translation permission level for a specific user.
 *
 * @param $langcode
 *   Language code, for example 'hu', 'pt-br', 'de' or 'it'.
 * @param $account
 *   Optional user account.
 * @return
 *   number, 0 = not allowed, 1 = allowed to suggest, 2 = allowed to translate
 */
function l10n_community_get_permission($langcode, $account = NULL) {
  static $permissions = array();
  global $user;
  
  if (empty($langcode)) {
    return L10N_PERM_NONE;
  }
  if (!isset($account)) {
    $account = $user;
  }
  
  if (isset($permissions[$account->uid][$langcode])) {
    // Return cached value if available.
    return $permissions[$account->uid][$langcode];
  }
  
  // Initialize to lowest possible permission.
  $permissions[$account->uid][$langcode] = L10N_PERM_NONE;
  
  if ($account->uid == 1) {
    // The administrator has all permissions in all groups.
    return ($permissions[$account->uid][$langcode] = L10N_PERM_ALL);
  }

  if ($result = db_query("SELECT nid, language, model FROM {l10n_community_group}")) {
    // Fill up local cache with all langcode permission of this account for
    // future reference (eg. a page showing links for all languages).
    while ($group = db_fetch_object($result)) {
      if (!empty($account->og_groups) and !empty($account->og_groups[$group->nid])) {
        if (!empty($account->og_groups[$group->nid]['is_admin'])) {
          // Administrators of groups have all permissions in the group.
          $permissions[$account->uid][$group->language] = L10N_PERM_ALL; 
        }
        else if ($account->og_groups[$group->nid]['is_active']) {
          // Members in the group have a permission depending on the model used.
          $permissions[$account->uid][$group->language] = ($group->model == L10N_MODEL_OPEN ? L10N_PERM_ALL : L10N_PERM_SUGGEST);
        }
        else {
          // Otherwise permission to view, no permission to write.
          $permissions[$account->uid][$group->language] = L10N_PERM_NONE;
        }
      }
    }
  }
  
  // Return from local cache.
  return $permissions[$account->uid][$langcode];
}

/**
 * Copy button for string values.
 */
function theme_l10n_community_copy_button($source_id = 0) {
  $title = t('Copy value to edit field.');
  return ' <span title="'. $title .'" id="l10n-community-copy-'. $source_id .'" class="l10n-community-copy"></span>';
}
